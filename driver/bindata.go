// Code generated by go-bindata.
// sources:
// override/templates/17_upsert.go.tpl
// override/templates/singleton/crdb_upsert.go.tpl
// override/templates_test/singleton/crdb_main_test.go.tpl
// override/templates_test/singleton/crdb_suites_test.go.tpl
// override/templates_test/upsert.go.tpl
// DO NOT EDIT!

package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x6f\xdb\x36\x10\x7f\x96\x3e\xc5\x35\x18\x10\x69\x70\x94\x3d\x67\xf0\x43\x93\xb4\x5d\xd1\x35\xf5\x9a\x66\x05\x56\x14\x01\x2d\x9d\x6c\xc2\x34\xa9\x52\x54\x52\x4f\xd3\x77\x1f\x8e\xa4\x2c\xc9\x7f\x1a\xb7\x5d\xb7\xee\x29\x16\x79\xbc\xfb\xdd\xdd\x8f\x77\xc7\xd4\xf5\x09\xfc\xc0\x04\x67\x25\x9c\x8d\x21\x79\x4c\xbf\xb0\x4c\xde\xb0\xa9\x40\x70\x7f\x92\x2b\xb6\xc4\xa6\x09\xad\x68\x99\xce\x71\xc9\xdc\x36\x1d\xe8\x24\xe0\x2f\x48\xae\xbb\x5d\x7b\x80\xe7\x90\x3c\xce\xb2\x67\x42\x4d\x99\x80\x93\xa6\x09\x4f\x4f\xe1\xa6\x28\x51\x9b\x67\xc0\x8c\xc1\x65\x61\x4a\x60\x12\xb8\xa4\xb5\x11\x30\x99\x41\xa6\xd0\xae\x55\x45\xc6\x0c\x82\xd2\xc0\x67\x52\x69\x04\x25\x21\x55\x32\x17\x3c\x35\x49\x98\x57\x32\x85\x48\xc1\x8f\x75\xed\xf0\x27\x37\xc5\x35\x97\xb3\x4a\x30\xdd\x34\x71\x6b\x25\xb2\x20\xa4\x32\x90\x5c\xa9\x0b\x25\x0d\x7e\x34\x4d\x93\x9a\x8f\xa4\x8a\x3e\x12\xbf\x38\x82\xba\x46\x99\x11\x48\x6f\xf9\x95\xbc\xf0\xd6\x60\xaa\x94\x18\xad\x8d\x5f\x28\x51\x2d\x65\x09\xef\xde\x97\x46\x73\x39\x1b\xf9\x03\x7e\x7d\xe4\xbd\x69\xc5\xa6\x8a\x8b\xc4\x7f\xc4\x80\x5a\x2b\x0d\x75\x18\x68\x34\x95\x96\xa0\x12\x87\xd4\x01\xed\x83\xb4\xe7\x9e\xa1\xb9\x3c\x8f\xe2\xba\x46\x51\xa2\x05\x3e\x82\x76\xc3\x4b\xfa\x7d\x99\x35\xcd\x68\x0b\xfa\x16\xea\x4f\x83\x8d\xc3\x26\x0c\xd7\x81\x08\x5d\x0a\x29\x29\xbd\x34\xd2\xcf\x09\x93\x3c\xdd\x48\xe8\xe4\xeb\x32\x0a\x56\x67\x49\x6b\x36\x46\x07\xa7\x78\xf2\xdd\xe5\xb8\x0e\x03\x9e\x93\x17\x74\x45\xbe\xb3\x04\xff\x6c\x71\x3d\x1a\x83\xe4\x82\x80\x06\x05\x85\x3d\xb2\x26\xdf\x6a\x56\x3c\xd1\x3a\x42\xad\xe3\x38\x0c\x9a\x5d\x64\xd8\x93\xfd\x5d\xc9\x87\xaa\xe4\x72\x46\xdf\xf8\x11\xd3\xca\x28\xfd\x39\x17\xbc\xa7\xba\xf8\x32\x66\x4c\xb6\x43\x4e\x40\x5c\x78\x9f\x78\x48\xbd\xc0\x6f\xd3\xa5\x13\xf7\x4b\xbd\x53\xbb\xd3\xf1\x2f\xd1\x68\x07\xd9\xfb\xe4\x26\xdc\xff\x29\x55\xd6\xc9\xfb\x16\xb4\xb8\x46\x1c\x44\x0a\x32\x95\x56\x4b\x94\x86\x19\xae\x24\xe4\x4a\xc3\x5c\xdd\x83\x51\x50\x68\x55\xa0\x16\x2b\xa8\x4a\x1c\xfa\x6a\x2d\x0e\xdc\x3d\x94\x55\xff\x73\x52\xad\xfb\x0f\xcf\x41\xc1\xb8\x4b\xae\xef\x47\x76\xbf\x4c\xae\xf0\x3e\x3a\xaa\xeb\x64\xb2\x98\xb9\xf6\x7f\x06\x52\x41\x5d\x0f\x46\x02\x8a\xef\x1d\xcf\x30\xb3\x31\xaf\x6c\x78\x8e\x2c\x1b\xc2\x80\xa6\x05\xca\xbc\xa0\x5c\x1e\x19\xbe\xc4\xd2\xb0\x65\x71\xeb\xa4\x6e\xe7\x28\x0a\xd4\x47\x90\x40\xe3\xa4\x3b\x52\xff\xa2\xd4\xa2\xb4\x34\x1a\xd0\x3f\x53\xe7\x98\x2b\x8d\x2e\x0b\x56\xe8\xe0\xbb\xb0\x4d\xe5\xce\x5b\x82\x6b\xd1\xda\xe0\x87\x61\x20\xff\xbc\xc4\x9c\x55\xc2\xd8\x91\xe8\x43\x85\x9a\x63\x99\x5c\x29\xf9\x07\x6a\xe5\xb7\xae\x91\x78\xe0\x59\x72\xa9\xee\x65\xc7\x13\x1f\xe9\xb7\xdc\xcc\xbd\xf0\x08\x54\x1c\x86\xc1\xe9\x29\x9c\x57\x5c\x64\x90\xb2\x74\x8e\xb0\xc0\x15\x70\x79\x22\xb8\x44\xa8\x66\x82\x8b\x15\x9c\xc0\x72\x55\x7e\x10\x70\x57\x42\x41\x7f\x0b\xad\xa6\x02\x97\x65\x18\x4c\xab\x9c\xc0\x94\x46\x2f\x99\x9c\x09\xa4\xee\x70\x5e\xe5\x39\xea\x28\xb6\x61\xda\xa2\x0c\x39\x39\xad\xf2\xe4\xad\xe6\x06\xcf\x57\x06\xa3\x63\x73\x4c\xb9\x01\xa2\xe6\xae\xed\xdc\x6e\x87\x9b\xcb\x09\x2d\x53\x7e\x6f\x47\x90\x12\x08\xcd\xe4\x0c\xb7\xc8\x38\x50\x78\x6d\x79\x19\xa5\xfb\x15\x6e\x8a\x96\x46\xa7\x4a\xde\x25\xcf\x8d\x62\xd1\x80\xce\xc9\x0b\x2e\xb3\x78\x27\x86\xa1\xdc\x85\x12\xff\x2c\x8c\x61\x79\xd8\x0f\x63\x28\xf7\x25\x30\xb6\x75\xf6\x48\xf8\x09\x5d\xc4\xa1\xb3\x31\xd0\xae\xdf\x88\xc3\xa0\x23\xc9\xa4\x6a\x49\x32\xad\xf2\xd8\x5e\xb3\x9d\x94\x75\x57\xea\x82\x68\xf9\xb2\x32\xc9\xeb\x5f\x55\xba\x20\x4d\x96\xa8\x23\xc7\xd7\x8c\x0c\x3d\x7c\xfe\xdd\x02\x57\xef\x0f\x36\x74\x23\x85\x33\x15\x06\x77\x4c\xdb\x3b\x6a\xeb\x4f\x68\x39\xfd\xc8\x1b\xa6\x00\xb4\xe3\xa4\x46\x43\x40\x86\x21\x7f\xde\xfb\xa2\x9b\x19\x06\xc1\x3e\x04\x6d\x8d\x7c\x58\xa4\x7f\x81\x0f\x93\x56\x95\xe9\x1f\xe8\x52\x48\x9f\x71\x18\x04\xbe\xb3\x9d\x8d\x37\x98\x7b\xd3\xfb\xfa\x7a\xfc\x13\xcd\x97\x4c\xaf\x5e\xe0\xaa\x27\x4c\x21\xa6\x98\x0a\x94\xfe\x7a\xc5\x54\xfc\x7f\xb2\xc1\x7d\xb8\xf6\x57\xd2\xbe\xf8\x8c\xf2\x55\x7e\xb3\x13\x50\x73\xaa\x44\x66\x6b\xf1\xd4\x16\x39\xef\x6b\x6a\x21\x80\xe0\xa5\xed\x0c\xb6\x35\x04\x6d\xed\xa0\x48\x6c\xd4\x91\x0e\x65\xbb\xd1\xc7\xb9\x3e\x38\x86\x25\x5b\x60\xd4\x75\x40\x3a\x71\x68\x3c\xe8\x16\x93\xae\x62\xb5\x36\x32\xda\x47\xed\xed\xc3\xd6\x89\xc0\xdd\x8d\x84\xba\xc3\x0a\xc6\xce\x67\xc7\xee\xdf\x68\xe9\x42\xa5\x0b\xad\x58\x3a\xbf\x3c\x8f\x32\xce\x04\x92\x89\xa3\xba\xee\xbf\x9f\x9b\xe6\x68\xd7\x8c\xa6\xd1\xb4\xcb\x5d\xcb\x6f\x7b\xba\x4d\xa3\x33\x7d\xc7\x44\x85\x2f\x59\x51\x58\xff\xe9\xea\x74\xcd\xea\x9c\xcb\xcc\x6f\xed\x8b\xca\x9b\x55\x81\x7b\xbd\x5e\xab\x6d\xad\x06\x6d\x2b\xee\xb5\xd0\x41\x0f\xb5\x31\xf1\x99\xd3\x68\x62\x12\x6c\x93\x66\xe1\x6a\x34\xdf\x1a\x2c\xd9\x25\x83\x3b\xa0\x0e\xb1\x5a\xb0\x8d\x9b\x53\x6c\x18\x6d\xdd\xc5\x9c\xd2\x94\x3c\x97\x19\xd7\x98\x9a\xa8\x5d\xf8\x9d\x24\x5e\xe5\x91\x22\xde\xdc\x31\x31\x18\x0b\xec\x66\xf9\x54\xab\x65\xeb\x82\x55\xe8\x8b\xe6\x20\x49\xb1\x2b\x72\x0e\x09\x4d\x6f\x5c\x1a\xd4\x39\x4b\xb1\x76\xa3\x8e\x65\xfd\x46\xb0\x7a\x81\x6c\x0f\x76\xc6\x27\x46\xef\x37\xdd\xd3\xe1\x3c\xe5\xb9\x1b\x05\x2f\x71\x5a\xcd\x5e\xaa\xcc\x0d\x01\xb7\x23\xb8\x85\x31\xe4\x4b\x93\x3c\x2d\x34\x97\x46\xc8\xa8\x13\xb3\x3d\x47\xb7\x2a\x2d\xdb\xe3\x83\x0f\x51\xac\x3a\xdb\x0f\x78\xb7\x31\x55\xbb\xf9\x2f\x70\x4c\xa1\x11\x2e\xb1\xf7\xea\xb5\xba\x8f\x7a\x58\x9c\x8d\x24\x49\xe2\xe4\x3a\x65\x96\x79\x14\x22\x5a\xb0\x2a\xed\xa8\xb3\x57\x93\x37\x15\xd9\x81\xf1\x73\xb4\xfa\x57\xce\x9a\x69\xe3\x31\x94\x1f\x44\xf2\x44\xeb\x2b\xf5\x5a\xdd\xbb\x96\xed\x2d\x12\x05\x4f\x4f\x81\x0a\x42\xaa\xb4\xad\x08\xf6\xa5\x23\x8f\x8d\xa7\x02\x30\xb9\x32\x73\x7a\x12\xdd\xcf\x51\x82\x99\xa3\xc6\xe3\x92\xc6\x6d\x57\x05\x3c\x57\xbb\xb9\x6d\x77\xa8\x6e\xdb\x7b\x65\x7d\xa4\x37\xc5\xee\x48\x6d\x06\x66\xfb\xdc\xc3\x71\x19\x86\xa1\x1b\xd4\x77\x0e\xd8\xd4\x52\xe8\xb9\x48\x6f\x45\x5b\x04\x3f\xa7\xb1\x1c\x75\x04\xea\x8f\x03\x87\xcd\x17\xed\x1c\x73\x80\xb8\x9d\x5b\x60\xec\xdc\x3d\xd8\xc0\x7a\x7e\x09\x3e\xf1\x88\x59\xff\xa3\x2f\x53\x8f\x73\x83\xfa\x8b\x1e\x30\xfe\x89\xb2\x4e\x9b\x57\x2a\xb9\xe8\x3f\x5e\x9a\xbf\x03\x00\x00\xff\xff\xe7\x02\x27\x87\xcf\x15\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSingletonCrdb_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x6d\x6f\xda\x3c\x14\xfd\x6c\xff\x8a\xdb\x48\x55\x13\xc9\x0a\x4f\xbf\x3e\x12\x1f\x5a\x92\x76\x4c\x28\x14\x48\xb6\x49\xd3\x54\x85\xe4\x06\xac\x05\x87\xf9\x85\xb6\x5a\xf9\xef\x93\xf3\x42\x68\xe9\x3a\x55\x42\x06\xf9\xde\x73\x7c\x7c\x7c\x2e\x83\x01\x2c\x0d\x2f\xf3\x64\xab\x50\xea\x99\x41\xf9\x34\xaa\xb2\x9f\xb2\x4a\xb3\x75\x70\xdd\xd4\x14\xa4\xb0\x98\x4d\x40\xe9\x54\xe3\x06\x85\x06\xa5\x25\x17\x2b\x30\xca\xae\x7a\x8d\x60\x6a\x78\x90\xea\x14\xb6\xb2\xda\xf1\x1c\x73\x9f\x16\x46\x64\xef\xb1\xbb\x39\x4f\x21\x97\x7c\x87\x52\xf9\x01\x4f\x4b\xcc\x34\x03\x9d\x2e\x4b\x8c\xd2\x0d\xb6\xa7\x30\x30\xdb\x3c\xd5\x38\x15\xa3\x4a\x14\x25\xcf\x34\x2c\xab\xaa\x64\x20\x51\x77\x35\x06\x59\x5b\x63\xf0\xb0\xe6\x1a\x4b\xae\x34\x7c\xff\xd1\x30\x78\x9d\xde\xdf\x94\x74\x7d\x30\xb4\x9b\x9b\x54\xac\x4a\xf4\xc7\x39\x0a\x3d\x33\x95\xc6\x45\xc9\x33\xb4\xba\xfc\xc9\x8c\x81\xfd\x9e\xcf\x7a\x72\x8f\x92\x9e\xfd\x23\x04\x07\x94\x47\x89\xc4\x8f\x61\x25\x6a\x8f\x52\xb2\x34\x05\xfc\x7f\x8c\xbb\x45\x7d\x6d\x8a\x02\xa5\xeb\x51\x92\x63\x81\xf2\xa8\x78\x67\xba\xe2\xd2\x14\x16\x9e\x55\xa5\xd9\x08\x65\x29\x9c\x20\xbc\xb9\x4a\x26\x31\x7c\xb9\x9a\x24\xe1\xc2\xa1\x84\x17\x50\xa2\x70\x7b\x95\x70\x36\x84\xff\xac\x5d\x07\xdc\x10\x8a\x8d\xf6\x17\x5b\xc9\x85\x2e\x5c\xc7\x3d\x57\x5e\x8b\x07\xfb\xdb\x61\x94\x10\xd2\xd8\xac\xfc\xcf\x15\x3f\x62\x63\xe0\x30\x70\xbc\xae\xa3\x53\x58\xa6\x19\xae\xab\x32\x47\xa9\xea\x3b\x27\x0a\xc7\x22\xc7\xc7\xe3\x02\x7b\xa5\x8b\xc1\x25\x83\x4b\xcf\xa3\x64\x4f\x29\xb9\x67\x70\xdf\x0a\xbb\x69\x85\x51\x62\x8d\xb2\x47\x39\xe3\x68\x11\xce\x63\x18\x47\xf1\x14\xce\x95\xfd\x4c\x23\x18\x4d\xa3\x9b\xc9\x78\x14\x43\x2d\xf8\x10\x35\xd6\xdf\x94\x51\x62\xfd\x1a\x0c\x20\xeb\x92\x0a\xf8\xb8\xc5\x4c\xab\x3a\xe9\x87\x00\xe1\x0e\x05\xe8\x75\x65\x56\x1a\x1e\x10\x52\x89\x20\x2a\xdd\x04\x92\x8b\x55\xfd\x62\xfe\x57\xc9\x35\x5e\x3f\x69\x74\x2f\xdc\x0b\xef\x68\x6f\x51\x5b\xe5\xbe\x70\xac\xcf\x70\x6d\xd8\x1b\xed\x8e\x07\x8e\x55\xc7\x0b\x38\x3b\x99\x8a\xe7\xe7\xda\xad\x66\xdf\x83\x61\xf7\x84\x27\x24\xc1\x14\xa2\x69\xfc\x69\x1c\xdd\x3a\xd6\x49\xc0\x52\xe1\x5f\x3b\x93\xbb\xe0\x2a\x0e\x61\x11\xc6\xcd\xd1\xa4\xa8\x24\x70\x06\x3b\x1b\x25\x99\x8a\x15\xb6\x33\x58\x33\x58\x65\xbc\x4f\x0f\x79\x6d\x02\xb3\x26\x10\xb2\xb7\xcb\x2f\x9b\xf9\xfc\x65\xa8\xfb\x61\x38\x99\x83\x5d\x8d\x7c\x2d\xb1\x21\x79\xb3\xe4\xc0\x10\xc2\x6f\xa3\x49\x12\x84\x81\xef\xfc\x03\xbd\x6f\x22\xd5\x4e\x82\x9d\xb9\xfe\x16\xa7\xc4\xf3\x30\x4e\xe6\xd1\x38\xba\x85\x9a\xf7\xdd\x57\xad\xff\xa6\xba\x07\xb5\x67\x48\xd4\x46\x0a\xb0\xa0\xb6\xdf\xa3\xfb\x3f\x01\x00\x00\xff\xff\xb7\x86\x27\x52\x88\x05\x00\x00")

func templatesSingletonCrdb_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonCrdb_upsertGoTpl,
		"templates/singleton/crdb_upsert.go.tpl",
	)
}

func templatesSingletonCrdb_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonCrdb_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/crdb_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonCrdb_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x6d\x6f\xdb\x36\x10\xfe\x1c\xff\x8a\xab\x80\xb4\x52\xa0\xd0\xfb\x9c\x41\xc8\x1c\xdb\x29\x82\xae\x49\x67\x1b\xeb\x5e\x3a\xac\xb4\x74\xb2\x89\x48\xa4\x4c\x52\x75\xdd\x2e\xff\x7d\xe0\x8b\x22\xc9\x71\xda\x60\xdd\xf6\x29\xf1\xdd\xc3\x7b\x79\xee\x78\x3c\x7d\xa0\x12\xe4\xea\xe3\x78\x72\x71\x79\x8b\x3b\x48\x40\xe2\x0a\x3f\x56\xe4\x75\xad\xf4\x58\x94\x15\x2b\x30\x7c\x1f\x9e\x97\x51\x18\xbe\xe3\xd1\x39\x39\x19\xdf\x5c\xcf\x17\xb3\xd1\xd5\xf5\x82\x9c\x9c\x5f\xde\xcc\xa6\x57\x2f\xaf\xe1\xd5\xf4\x57\x72\x72\xfe\x8e\xff\x65\x41\xbf\xd3\xd3\x4f\xa3\xd3\xdf\xe0\xcf\x3f\x4e\x7e\x1e\xfd\x78\x35\x19\x2d\xa6\xd0\x3b\x66\xb1\xd1\xfb\x68\x30\xd0\xbb\x0a\x21\x95\xd9\x72\x81\x4a\xa3\x04\xa5\x65\x9d\x6a\xf8\x3c\x00\xc8\x96\x63\xc1\x39\x9c\xa8\x4d\x41\x26\x17\x03\x2b\xb9\xa6\x25\x82\x01\x31\xbe\x1a\x00\xac\x85\xd2\x00\x1d\x41\xad\x50\xf6\x04\x15\x55\xaa\x27\x50\xaa\x28\x45\x86\x1d\x84\x90\xd6\x06\xe3\xda\xf8\xd0\xa8\xf4\xe4\xc2\xfa\xf1\x90\xbb\xc1\x20\xaf\x79\x0a\x8c\x33\x1d\x46\x3e\xb4\xd7\x94\x71\x48\xe0\x79\x1b\xfa\xe7\x3b\x83\x1c\x0e\x41\xa1\xae\x2b\xc8\xea\xb2\x52\xa0\xd7\x08\x19\xd5\x74\x49\x15\x82\x4a\xd7\x58\x52\xa0\x3c\x03\x56\x1a\xb7\x0a\x98\x36\x7e\x05\x50\xd0\x68\x44\x54\xee\x40\x52\x9e\x89\xb2\xd8\x19\x5b\x2b\xe4\x28\xa9\xc6\xcc\xc6\xd5\x31\x25\x40\xaf\xa9\xb6\x52\x05\x29\xe5\xb0\x44\x90\x35\x07\xba\xa2\x8c\x2b\x6d\x0c\xd7\x8a\xf1\x95\x89\xa0\x6f\x48\x6d\x8a\xa5\x60\x05\x4a\xb8\x99\xbd\x86\x8a\xa6\xb7\x74\x85\xc4\xa5\x18\xa6\x70\xd2\x66\x14\xb9\x54\xc2\x08\x50\x4a\x21\x6d\xe6\xa6\x5d\x50\x4a\x27\x31\x7c\xa5\xc4\x57\x25\x81\x0f\xac\x42\x49\x5e\xa2\x9e\x5b\xe2\xc2\xc0\x98\x22\xd9\x92\xd3\x12\x83\xc8\x62\x6d\xc1\x1e\x43\x1a\xa5\xc7\xd9\x3a\x3e\x86\x33\x4a\x8f\xb3\xe5\x7d\x0c\x67\x94\x0d\xce\x14\xb9\x83\xbb\xe2\xba\x01\x09\xd9\x38\x6d\x5a\xe3\x31\x7b\x5e\x6f\xd1\xc3\x21\x8c\x25\x52\x8d\x40\x7d\xc1\xd8\x27\xcc\x20\x5b\x82\xc9\x96\x58\x7b\x9d\x56\x4a\x5a\x10\x99\x6b\xba\x2c\xd0\x29\xc2\x86\xbe\xc8\x70\xc9\x72\xcb\x6d\x62\x48\x95\xa2\x5a\xd8\xf3\x61\xf4\xbd\x95\x3e\x4b\x80\xb3\xc2\x16\x01\x40\xa2\xae\x25\x37\xf2\x01\xc0\x5d\xff\x68\x6a\xe3\x7a\xfa\x61\xd3\xcf\x75\x59\x8d\xcb\x0c\xce\x12\xc0\x8f\x98\x92\xb1\x28\x4b\xca\xb3\x30\x48\x45\x7a\x2b\x05\x4d\xd7\x41\x0c\x81\x41\x05\xf1\x7d\xc5\x63\x08\x4e\x4f\x19\x57\x98\xd6\x12\x03\xfb\xcb\x20\x4e\x0d\x47\x89\xeb\x75\x47\xac\x8d\xe7\xeb\xe6\xd5\xa6\xf0\x56\x7c\x97\x5b\x5f\x2d\x89\x7d\x7f\x96\x30\x19\xc3\xd6\x58\x65\x82\xbc\x61\x15\x86\x51\x9b\x0b\x99\xeb\x4c\xd4\xa6\xe8\xdb\x6e\x0c\x46\x6c\x6f\x2e\xc7\xed\xe5\x2b\xdc\x4d\x50\x69\x29\x76\x28\xc3\x76\x08\xc6\x20\xfb\xe5\x68\x4d\x52\xa9\x0f\x52\xda\x25\x55\x48\x45\xde\x4a\x5a\x85\x28\x65\x0c\x41\x4e\x59\x61\xee\xaf\x00\x65\x8e\xc3\x8b\xfb\xa4\xad\xdd\x17\x90\x3a\x36\x2c\x57\xfd\x52\x76\x82\xfe\x77\x1d\xab\x4d\xb1\xef\xf7\x50\xbe\x6f\x29\xfb\x06\xaf\x5b\xca\x34\xe4\x42\x7e\xdd\xf1\x70\x08\xa3\xdc\x4c\xff\xa6\x0f\x99\x82\x4c\x70\x8c\x21\x2d\x84\x42\x3b\x45\xb7\x92\x69\x04\xe4\x19\x88\xdc\x0a\x2a\x56\x61\x37\xe8\x2d\x19\x1b\xf0\x3f\x8f\xd7\xf9\x32\x66\x0f\x50\xd2\xd6\xe2\xff\x22\xc5\x1b\xe3\xac\xb8\x7f\x81\xf6\xc7\xb3\xac\xf9\xb8\xcc\x42\x65\x5a\x3a\x6e\x2c\xf8\x67\x2b\x06\x2a\x57\x0a\x08\x21\xee\x77\x77\x88\xa7\x07\xee\xa2\x3f\xed\x8e\x11\x42\x22\x87\x23\x53\xfe\x01\x12\x10\xca\xfc\xc3\xa4\xe0\x61\x73\x35\x0a\xe4\xce\x73\x64\x68\xf8\xce\x93\x90\x76\xae\x98\x73\xac\xc8\x35\x6e\x67\x48\x33\x94\x1e\xdf\x64\xa8\xdc\x0d\x3d\x4b\xe0\xf9\x72\xa7\x51\x91\x8b\x3a\xcf\xed\x43\x6a\x75\x86\xe0\x83\xba\xb4\x7b\xbb\x9d\x91\x56\xea\xca\xe5\x8e\xb7\x05\x3c\x4b\xac\x7e\x56\xf3\x83\xa5\xcb\x4b\x4d\xde\x48\xc6\x75\xc1\xc3\xa6\x58\xb2\xe6\x9c\xf1\xd5\x59\x70\xcf\xac\xe3\x26\x7a\x70\xc2\x85\x40\xfc\x5b\x11\x1d\x04\xa0\x94\x7b\x80\x87\x53\xf8\x09\x15\xef\xcf\xf6\x4e\x49\x95\x2e\x2d\x93\xc6\xed\xbc\x32\x7e\xf3\x30\x18\xcf\xa6\x66\xf5\x9a\x8c\x16\xa3\x8b\xd1\x7c\x0a\xc7\x6a\x6f\xa4\x46\xad\xd7\x94\xf8\x6e\x0a\xcc\x10\x3e\x3c\x98\xfb\xc3\xde\xb4\x4f\xad\xcd\x0f\xe3\x3c\x7a\x34\xe6\xee\x53\xf6\xb5\x88\x27\xb3\x9b\x37\x6d\xbc\x57\x97\x30\xfd\xe5\x6a\xbe\x98\xc3\xb1\x82\xf1\x68\x3e\x1e\x4d\xa6\xff\x71\x06\xc3\x21\x68\xa4\x32\x13\x5b\x0e\x5e\xad\x20\x2d\x90\xf2\xba\x02\x4d\xd5\xad\x82\xed\x1a\xb9\x9d\x40\x6e\xf9\xca\x19\x67\x6a\xdd\xb4\xcb\x61\x0a\x1a\x93\x5f\x58\xa5\xfa\xaf\xbf\x5d\x7d\xbf\x30\xd0\x1e\xbc\xff\xcd\x19\xb0\xa8\x6f\x5a\x26\x9e\xd8\x89\x82\x9b\x74\x42\xbf\x9e\xc7\x2e\x0d\xb7\x1e\xb3\xbc\x8d\xe7\x90\xa7\x46\x19\x5b\x0f\xde\xe7\x3e\x1d\x2d\xc8\x5f\xe9\x4d\x41\x6e\x2a\xe4\x61\x50\x09\xa5\x57\x12\x4d\x33\x2f\x6b\x56\x64\x3f\xd5\x28\x77\xfe\x72\xb9\xd5\x31\xf6\xab\xe1\xfe\x02\xe1\x16\xd0\xd8\x2f\x84\x71\xbb\xf3\xd9\x3b\xe9\x19\x3b\x14\x31\x67\x45\x7c\x80\xa0\x7e\x22\x0d\x55\x0f\x82\x72\x21\xb9\x80\xdc\x3a\x1c\xbb\x4f\x97\x66\x54\xdb\xf5\x94\x71\x1d\xef\x7d\x9e\x44\xfe\x2f\x7c\x1e\x1c\x19\x7e\xea\xaa\xf9\x28\x39\x62\xb9\xfb\xd8\x79\x96\x40\x10\x18\xfd\x51\x5d\x41\x62\x65\x83\xa3\x3b\xab\xb7\xcb\xf1\x9e\xbe\x77\xdb\x8e\xd5\x99\x1d\x09\x75\xe5\xa2\x8b\xcc\xc9\xc1\x91\x4f\xae\x07\x6d\x38\xdf\x14\x67\xc3\xe1\xb1\xfa\xc1\x1c\xcd\x86\xc7\xea\xdc\x07\x9c\xdc\x1b\x72\x0c\x3b\x7e\x9b\x64\x1b\x96\x07\x77\x7f\x07\x00\x00\xff\xff\x66\x71\x74\xa2\x6f\x0e\x00\x00")

func templates_testSingletonCrdb_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_main_testGoTpl,
		"templates_test/singleton/crdb_main_test.go.tpl",
	)
}

func templates_testSingletonCrdb_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonCrdb_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\xca\x83\x30\x10\x84\xef\xff\x53\x0c\xe2\x41\x7f\x34\x0f\xf0\xc3\x7f\xea\xa9\x3d\xf4\x50\xec\x03\xa4\x75\x95\x40\xba\x15\xb3\x42\x21\xe6\xdd\x8b\x31\x58\x7b\xcb\x64\xe6\xdb\x9d\xed\x26\xbe\xa3\x21\x27\xd7\xc1\xd1\x28\x85\xe0\x57\xc8\x89\xe1\x5e\x35\x25\xfc\x0f\xe0\x7d\x8d\x51\x73\x4f\xc8\x0d\xb7\xf4\xaa\x90\x8b\xbe\x59\xc2\xdf\x3f\x54\xb3\xbc\x5c\x08\x29\x67\xba\x64\xaa\xa3\x3b\x3d\x0d\x47\x1b\xf5\xe6\x93\x75\x7b\xb9\x66\xcf\xfa\x11\x87\x25\x32\xca\x19\x83\x9d\x46\x6d\x31\x43\x8c\x58\x3a\xe8\x0d\x14\x75\x99\xb8\xc8\xbc\xff\xd0\x21\x64\x15\x96\xda\xdf\x9f\xeb\x49\x65\x5c\x46\xdc\xee\x7b\x24\x15\xde\x01\x00\x00\xff\xff\x91\x6e\x4f\x2d\xff\x00\x00\x00")

func templates_testSingletonCrdb_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_suites_testGoTpl,
		"templates_test/singleton/crdb_suites_test.go.tpl",
	)
}

func templates_testSingletonCrdb_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4f\x6f\xdb\x3e\x0c\x3d\x5b\x9f\x82\xbf\xe0\xb7\x41\x1e\x5c\x15\xbb\x76\xc8\xa1\xff\x0e\xc5\xb0\x20\x68\x9c\xf3\xa0\xda\x74\x2a\x44\x91\x0c\x89\x5e\x92\x19\xfa\xee\x83\xe4\xb4\x4d\xdb\x74\x08\x86\x0d\xc3\x0e\x89\x2d\xe1\xf1\x3d\x92\x8f\x74\xdf\x9f\xc0\xff\x52\x2b\xe9\xe1\x6c\x0c\xe2\x3c\xbe\xa1\x17\xa5\xbc\xd3\x08\xc3\x43\x4c\xe4\x0a\x43\x60\x4d\x67\x2a\x20\xf4\xd4\xf7\x43\x84\x98\xb7\x53\xdd\x39\xa9\x43\x98\xb7\x1e\x1d\x71\x82\x0f\x11\xa0\xcc\x42\x94\x39\xf4\x2c\x23\x31\x95\x4e\x6a\x8d\x9a\xe7\x8c\x65\xaa\x01\x8d\x86\x3f\x12\x5c\xd9\xb5\x99\x29\xb3\xe8\xb4\x74\x21\x5c\x5a\xdd\xad\x8c\xcf\x61\x3c\xfe\x19\x6c\xea\xd4\x4a\xba\xed\x67\xdc\x3e\x06\xf4\x2c\xcb\x48\xcc\x96\xaa\xe5\xa3\xf8\xdf\x2a\xb3\x00\x4a\x35\xac\x15\xdd\x83\x35\x7a\x0b\xed\x10\x07\x4b\xdc\x42\x35\x44\x8e\x72\x96\x05\xc6\x32\x8f\x58\xc7\xfa\x9d\x34\xb5\x5d\xa9\xef\x28\x26\xb8\x9e\x21\xd6\x3c\x67\xd9\x37\xe9\x00\x5d\xfa\x59\xc7\xb2\xd3\x53\x38\x27\xc2\x55\x4b\x40\xf7\x08\x37\x93\xd9\xf5\x6d\x09\x5e\xd5\x08\xb6\x01\x69\x60\x3e\x8d\x37\x2c\xb3\x91\x71\xaf\x57\x4f\x15\xf4\x21\xb5\x22\x92\xee\x6b\xce\xc8\x75\x15\xf1\x98\x4c\x01\xef\x6d\x01\x6f\x34\xe0\xea\xa2\xdc\xb6\xe8\x0b\x20\xd7\x61\xfe\x29\xf1\xfc\x37\x06\xa3\xf4\xae\x11\xd7\x31\xd3\x86\x8f\xe6\x26\xb5\x80\xec\x93\xc8\xe1\x84\xc0\x27\xe9\x33\x78\xe7\x47\x45\xe4\xdb\xf5\xa5\xef\x55\x03\xc6\x12\x88\x89\xbd\xb4\x86\x70\x43\x21\x54\xb4\x89\x95\x55\xc3\x59\x5c\xc8\x6a\xb9\x70\xb6\x33\x35\xcf\xfb\x1e\x4d\x1d\x02\xcb\x06\xc8\x97\xce\x53\xb9\xe1\x89\x65\x9f\xe1\xd5\xc5\x9d\x55\x5a\x5c\xe0\x42\x99\xc4\xa1\x3d\xee\xdf\x95\x1b\x5e\xd1\xa6\x88\x05\x3e\x28\x1c\x05\xca\x59\x56\x63\x83\x0e\xe2\xe4\xf2\x1c\x7a\xf8\x0a\x63\xa0\x8d\xb8\xb5\x5a\xdf\xc9\x6a\xc9\x73\x08\xd1\xe1\x47\x2f\xac\xd8\x0d\xf2\x5b\x85\x47\x4f\xd0\xd4\x70\x12\x02\xc4\x53\x23\xb5\xc7\x24\x5a\x40\xca\xe5\xc6\x34\xe8\x78\xfe\xfc\x74\x9c\x47\x5d\x92\x3e\x6c\xd0\x2b\x67\x2a\xdb\x19\x4a\x17\x2f\xa6\xec\x61\x23\x79\x2e\x2e\x23\xe6\xc8\x52\x9e\xba\xf0\x3a\x4b\xfe\x20\x1b\x21\x49\x38\x82\x3e\x3e\x83\x8c\xd6\xd2\x10\x58\x83\xe0\xb0\xb2\xae\x2e\x60\x61\xe9\x6c\x54\x0c\xf8\x5d\xd2\x2f\x56\x67\x3e\xbd\x3a\x2f\xaf\x0f\xad\xce\xef\x58\x8e\x9d\x35\xc7\x7e\x44\x84\x10\x7f\x74\x95\x7e\x7d\xc6\xe2\x96\xff\xe5\x11\xfb\x47\x26\x2c\xfc\x08\x00\x00\xff\xff\x3e\xf4\x07\x51\xce\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl": templates17_upsertGoTpl,
	"templates/singleton/crdb_upsert.go.tpl": templatesSingletonCrdb_upsertGoTpl,
	"templates_test/singleton/crdb_main_test.go.tpl": templates_testSingletonCrdb_main_testGoTpl,
	"templates_test/singleton/crdb_suites_test.go.tpl": templates_testSingletonCrdb_suites_testGoTpl,
	"templates_test/upsert.go.tpl": templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"crdb_upsert.go.tpl": &bintree{templatesSingletonCrdb_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"crdb_main_test.go.tpl": &bintree{templates_testSingletonCrdb_main_testGoTpl, map[string]*bintree{}},
			"crdb_suites_test.go.tpl": &bintree{templates_testSingletonCrdb_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

