// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl
// override/templates/singleton/crdb_upsert.go.tpl
// override/templates_test/singleton/crdb_main_test.go.tpl
// override/templates_test/singleton/crdb_suites_test.go.tpl
// override/templates_test/upsert.go.tpl

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x6f\xdb\x36\x10\x7f\x96\x3e\xc5\x35\x18\x10\x69\x70\x94\x3d\x67\xf0\x43\x93\xb4\x5d\xd1\x35\xf5\x9a\x66\x05\x56\x14\x01\x2d\x9d\x6c\xc2\x34\xa9\x52\x54\x52\x4f\xd3\x77\x1f\x8e\xa4\x2c\xc9\x7f\x1a\xb7\x5d\xb7\xee\x29\x16\x79\xbc\xfb\xdd\xdd\x8f\x77\xc7\xd4\xf5\x09\xfc\xc0\x04\x67\x25\x9c\x8d\x21\x79\x4c\xbf\xb0\x4c\xde\xb0\xa9\x40\x70\x7f\x92\x2b\xb6\xc4\xa6\x09\xad\x68\x99\xce\x71\xc9\xdc\x36\x1d\xe8\x24\xe0\x2f\x48\xae\xbb\x5d\x7b\x80\xe7\x90\x3c\xce\xb2\x67\x42\x4d\x99\x80\x93\xa6\x09\x4f\x4f\xe1\xa6\x28\x51\x9b\x67\xc0\x8c\xc1\x65\x61\x4a\x60\x12\xb8\xa4\xb5\x11\x30\x99\x41\xa6\xd0\xae\x55\x45\xc6\x0c\x82\xd2\xc0\x67\x52\x69\x04\x25\x21\x55\x32\x17\x3c\x35\x49\x98\x57\x32\x85\x48\xc1\x8f\x75\xed\xf0\x27\x37\xc5\x35\x97\xb3\x4a\x30\xdd\x34\x71\x6b\x25\xb2\x20\xa4\x32\x90\x5c\xa9\x0b\x25\x0d\x7e\x34\x4d\x93\x9a\x8f\xa4\x8a\x3e\x12\xbf\x38\x82\xba\x46\x99\x11\x48\x6f\xf9\x95\xbc\xf0\xd6\x60\xaa\x94\x18\xad\x8d\x5f\x28\x51\x2d\x65\x09\xef\xde\x97\x46\x73\x39\x1b\xf9\x03\x7e\x7d\xe4\xbd\x69\xc5\xa6\x8a\x8b\xc4\x7f\xc4\x80\x5a\x2b\x0d\x75\x18\x68\x34\x95\x96\xa0\x12\x87\xd4\x01\xed\x83\xb4\xe7\x9e\xa1\xb9\x3c\x8f\xe2\xba\x46\x51\xa2\x05\x3e\x82\x76\xc3\x4b\xfa\x7d\x99\x35\xcd\x68\x0b\xfa\x16\xea\x4f\x83\x8d\xc3\x26\x0c\xd7\x81\x08\x5d\x0a\x29\x29\xbd\x34\xd2\xcf\x09\x93\x3c\xdd\x48\xe8\xe4\xeb\x32\x0a\x56\x67\x49\x6b\x36\x46\x07\xa7\x78\xf2\xdd\xe5\xb8\x0e\x03\x9e\x93\x17\x74\x45\xbe\xb3\x04\xff\x6c\x71\x3d\x1a\x83\xe4\x82\x80\x06\x05\x85\x3d\xb2\x26\xdf\x6a\x56\x3c\xd1\x3a\x42\xad\xe3\x38\x0c\x9a\x5d\x64\xd8\x93\xfd\x5d\xc9\x87\xaa\xe4\x72\x46\xdf\xf8\x11\xd3\xca\x28\xfd\x39\x17\xbc\xa7\xba\xf8\x32\x66\x4c\xb6\x43\x4e\x40\x5c\x78\x9f\x78\x48\xbd\xc0\x6f\xd3\xa5\x13\xf7\x4b\xbd\x53\xbb\xd3\xf1\x2f\xd1\x68\x07\xd9\xfb\xe4\x26\xdc\xff\x29\x55\xd6\xc9\xfb\x16\xb4\xb8\x46\x1c\x44\x0a\x32\x95\x56\x4b\x94\x86\x19\xae\x24\xe4\x4a\xc3\x5c\xdd\x83\x51\x50\x68\x55\xa0\x16\x2b\xa8\x4a\x1c\xfa\x6a\x2d\x0e\xdc\x3d\x94\x55\xff\x73\x52\xad\xfb\x0f\xcf\x41\xc1\xb8\x4b\xae\xef\x47\x76\xbf\x4c\xae\xf0\x3e\x3a\xaa\xeb\x64\xb2\x98\xb9\xf6\x7f\x06\x52\x41\x5d\x0f\x46\x02\x8a\xef\x1d\xcf\x30\xb3\x31\xaf\x6c\x78\x8e\x2c\x1b\xc2\x80\xa6\x05\xca\xbc\xa0\x5c\x1e\x19\xbe\xc4\xd2\xb0\x65\x71\xeb\xa4\x6e\xe7\x28\x0a\xd4\x47\x90\x40\xe3\xa4\x3b\x52\xff\xa2\xd4\xa2\xb4\x34\x1a\xd0\x3f\x53\xe7\x98\x2b\x8d\x2e\x0b\x56\xe8\xe0\xbb\xb0\x4d\xe5\xce\x5b\x82\x6b\xd1\xda\xe0\x87\x61\x20\xff\xbc\xc4\x9c\x55\xc2\xd8\x91\xe8\x43\x85\x9a\x63\x99\x5c\x29\xf9\x07\x6a\xe5\xb7\xae\x91\x78\xe0\x59\x72\xa9\xee\x65\xc7\x13\x1f\xe9\xb7\xdc\xcc\xbd\xf0\x08\x54\x1c\x86\xc1\xe9\x29\x9c\x57\x5c\x64\x90\xb2\x74\x8e\xb0\xc0\x15\x70\x79\x22\xb8\x44\xa8\x66\x82\x8b\x15\x9c\xc0\x72\x55\x7e\x10\x70\x57\x42\x41\x7f\x0b\xad\xa6\x02\x97\x65\x18\x4c\xab\x9c\xc0\x94\x46\x2f\x99\x9c\x09\xa4\xee\x70\x5e\xe5\x39\xea\x28\xb6\x61\xda\xa2\x0c\x39\x39\xad\xf2\xe4\xad\xe6\x06\xcf\x57\x06\xa3\x63\x73\x4c\xb9\x01\xa2\xe6\xae\xed\xdc\x6e\x87\x9b\xcb\x09\x2d\x53\x7e\x6f\x47\x90\x12\x08\xcd\xe4\x0c\xb7\xc8\x38\x50\x78\x6d\x79\x19\xa5\xfb\x15\x6e\x8a\x96\x46\xa7\x4a\xde\x25\xcf\x8d\x62\xd1\x80\xce\xc9\x0b\x2e\xb3\x78\x27\x86\xa1\xdc\x85\x12\xff\x2c\x8c\x61\x79\xd8\x0f\x63\x28\xf7\x25\x30\xb6\x75\xf6\x48\xf8\x09\x5d\xc4\xa1\xb3\x31\xd0\xae\xdf\x88\xc3\xa0\x23\xc9\xa4\x6a\x49\x32\xad\xf2\xd8\x5e\xb3\x9d\x94\x75\x57\xea\x82\x68\xf9\xb2\x32\xc9\xeb\x5f\x55\xba\x20\x4d\x96\xa8\x23\xc7\xd7\x8c\x0c\x3d\x7c\xfe\xdd\x02\x57\xef\x0f\x36\x74\x23\x85\x33\x15\x06\x77\x4c\xdb\x3b\x6a\xeb\x4f\x68\x39\xfd\xc8\x1b\xa6\x00\xb4\xe3\xa4\x46\x43\x40\x86\x21\x7f\xde\xfb\xa2\x9b\x19\x06\xc1\x3e\x04\x6d\x8d\x7c\x58\xa4\x7f\x81\x0f\x93\x56\x95\xe9\x1f\xe8\x52\x48\x9f\x71\x18\x04\xbe\xb3\x9d\x8d\x37\x98\x7b\xd3\xfb\xfa\x7a\xfc\x13\xcd\x97\x4c\xaf\x5e\xe0\xaa\x27\x4c\x21\xa6\x98\x0a\x94\xfe\x7a\xc5\x54\xfc\x7f\xb2\xc1\x7d\xb8\xf6\x57\xd2\xbe\xf8\x8c\xf2\x55\x7e\xb3\x13\x50\x73\xaa\x44\x66\x6b\xf1\xd4\x16\x39\xef\x6b\x6a\x21\x80\xe0\xa5\xed\x0c\xb6\x35\x04\x6d\xed\xa0\x48\x6c\xd4\x91\x0e\x65\xbb\xd1\xc7\xb9\x3e\x38\x86\x25\x5b\x60\xd4\x75\x40\x3a\x71\x68\x3c\xe8\x16\x93\xae\x62\xb5\x36\x32\xda\x47\xed\xed\xc3\xd6\x89\xc0\xdd\x8d\x84\xba\xc3\x0a\xc6\xce\x67\xc7\xee\xdf\x68\xe9\x42\xa5\x0b\xad\x58\x3a\xbf\x3c\x8f\x32\xce\x04\x92\x89\xa3\xba\xee\xbf\x9f\x9b\xe6\x68\xd7\x8c\xa6\xd1\xb4\xcb\x5d\xcb\x6f\x7b\xba\x4d\xa3\x33\x7d\xc7\x44\x85\x2f\x59\x51\x58\xff\xe9\xea\x74\xcd\xea\x9c\xcb\xcc\x6f\xed\x8b\xca\x9b\x55\x81\x7b\xbd\x5e\xab\x6d\xad\x06\x6d\x2b\xee\xb5\xd0\x41\x0f\xb5\x31\xf1\x99\xd3\x68\x62\x12\x6c\x93\x66\xe1\x6a\x34\xdf\x1a\x2c\xd9\x25\x83\x3b\xa0\x0e\xb1\x5a\xb0\x8d\x9b\x53\x6c\x18\x6d\xdd\xc5\x9c\xd2\x94\x3c\x97\x19\xd7\x98\x9a\xa8\x5d\xf8\x9d\x24\x5e\xe5\x91\x22\xde\xdc\x31\x31\x18\x0b\xec\x66\xf9\x54\xab\x65\xeb\x82\x55\xe8\x8b\xe6\x20\x49\xb1\x2b\x72\x0e\x09\x4d\x6f\x5c\x1a\xd4\x39\x4b\xb1\x76\xa3\x8e\x65\xfd\x46\xb0\x7a\x81\x6c\x0f\x76\xc6\x27\x46\xef\x37\xdd\xd3\xe1\x3c\xe5\xb9\x1b\x05\x2f\x71\x5a\xcd\x5e\xaa\xcc\x0d\x01\xb7\x23\xb8\x85\x31\xe4\x4b\x93\x3c\x2d\x34\x97\x46\xc8\xa8\x13\xb3\x3d\x47\xb7\x2a\x2d\xdb\xe3\x83\x0f\x51\xac\x3a\xdb\x0f\x78\xb7\x31\x55\xbb\xf9\x2f\x70\x4c\xa1\x11\x2e\xb1\xf7\xea\xb5\xba\x8f\x7a\x58\x9c\x8d\x24\x49\xe2\xe4\x3a\x65\x96\x79\x14\x22\x5a\xb0\x2a\xed\xa8\xb3\x57\x93\x37\x15\xd9\x81\xf1\x73\xb4\xfa\x57\xce\x9a\x69\xe3\x31\x94\x1f\x44\xf2\x44\xeb\x2b\xf5\x5a\xdd\xbb\x96\xed\x2d\x12\x05\x4f\x4f\x81\x0a\x42\xaa\xb4\xad\x08\xf6\xa5\x23\x8f\x8d\xa7\x02\x30\xb9\x32\x73\x7a\x12\xdd\xcf\x51\x82\x99\xa3\xc6\xe3\x92\xc6\x6d\x57\x05\x3c\x57\xbb\xb9\x6d\x77\xa8\x6e\xdb\x7b\x65\x7d\xa4\x37\xc5\xee\x48\x6d\x06\x66\xfb\xdc\xc3\x71\x19\x86\xa1\x1b\xd4\x77\x0e\xd8\xd4\x52\xe8\xb9\x48\x6f\x45\x5b\x04\x3f\xa7\xb1\x1c\x75\x04\xea\x8f\x03\x87\xcd\x17\xed\x1c\x73\x80\xb8\x9d\x5b\x60\xec\xdc\x3d\xd8\xc0\x7a\x7e\x09\x3e\xf1\x88\x59\xff\xa3\x2f\x53\x8f\x73\x83\xfa\x8b\x1e\x30\xfe\x89\xb2\x4e\x9b\x57\x2a\xb9\xe8\x3f\x5e\x9a\xbf\x03\x00\x00\xff\xff\xe7\x02\x27\x87\xcf\x15\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0x36, 0xf9, 0x5b, 0x5e, 0x82, 0xd7, 0x27, 0x74, 0xa9, 0xfc, 0x98, 0x9e, 0x42, 0xa2, 0xe1, 0xb7, 0x63, 0x17, 0x8a, 0x6, 0x77, 0x48, 0xf4, 0x71, 0xc4, 0x24, 0x84, 0x24, 0xd6, 0xfc, 0x75}}
	return a, nil
}

var _templatesSingletonCrdb_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x6d\x6f\xda\x3c\x14\xfd\x6c\xff\x8a\xdb\x48\x55\x13\xc9\x0a\x4f\xbf\x3e\x12\x1f\x5a\x92\x76\x4c\x28\x14\x48\xb6\x49\xd3\x54\x85\xe4\x06\xac\x05\x87\xf9\x85\xb6\x5a\xf9\xef\x93\xf3\x42\x68\xe9\x3a\x55\x42\x06\xf9\xde\x73\x7c\x7c\x7c\x2e\x83\x01\x2c\x0d\x2f\xf3\x64\xab\x50\xea\x99\x41\xf9\x34\xaa\xb2\x9f\xb2\x4a\xb3\x75\x70\xdd\xd4\x14\xa4\xb0\x98\x4d\x40\xe9\x54\xe3\x06\x85\x06\xa5\x25\x17\x2b\x30\xca\xae\x7a\x8d\x60\x6a\x78\x90\xea\x14\xb6\xb2\xda\xf1\x1c\x73\x9f\x16\x46\x64\xef\xb1\xbb\x39\x4f\x21\x97\x7c\x87\x52\xf9\x01\x4f\x4b\xcc\x34\x03\x9d\x2e\x4b\x8c\xd2\x0d\xb6\xa7\x30\x30\xdb\x3c\xd5\x38\x15\xa3\x4a\x14\x25\xcf\x34\x2c\xab\xaa\x64\x20\x51\x77\x35\x06\x59\x5b\x63\xf0\xb0\xe6\x1a\x4b\xae\x34\x7c\xff\xd1\x30\x78\x9d\xde\xdf\x94\x74\x7d\x30\xb4\x9b\x9b\x54\xac\x4a\xf4\xc7\x39\x0a\x3d\x33\x95\xc6\x45\xc9\x33\xb4\xba\xfc\xc9\x8c\x81\xfd\x9e\xcf\x7a\x72\x8f\x92\x9e\xfd\x23\x04\x07\x94\x47\x89\xc4\x8f\x61\x25\x6a\x8f\x52\xb2\x34\x05\xfc\x7f\x8c\xbb\x45\x7d\x6d\x8a\x02\xa5\xeb\x51\x92\x63\x81\xf2\xa8\x78\x67\xba\xe2\xd2\x14\x16\x9e\x55\xa5\xd9\x08\x65\x29\x9c\x20\xbc\xb9\x4a\x26\x31\x7c\xb9\x9a\x24\xe1\xc2\xa1\x84\x17\x50\xa2\x70\x7b\x95\x70\x36\x84\xff\xac\x5d\x07\xdc\x10\x8a\x8d\xf6\x17\x5b\xc9\x85\x2e\x5c\xc7\x3d\x57\x5e\x8b\x07\xfb\xdb\x61\x94\x10\xd2\xd8\xac\xfc\xcf\x15\x3f\x62\x63\xe0\x30\x70\xbc\xae\xa3\x53\x58\xa6\x19\xae\xab\x32\x47\xa9\xea\x3b\x27\x0a\xc7\x22\xc7\xc7\xe3\x02\x7b\xa5\x8b\xc1\x25\x83\x4b\xcf\xa3\x64\x4f\x29\xb9\x67\x70\xdf\x0a\xbb\x69\x85\x51\x62\x8d\xb2\x47\x39\xe3\x68\x11\xce\x63\x18\x47\xf1\x14\xce\x95\xfd\x4c\x23\x18\x4d\xa3\x9b\xc9\x78\x14\x43\x2d\xf8\x10\x35\xd6\xdf\x94\x51\x62\xfd\x1a\x0c\x20\xeb\x92\x0a\xf8\xb8\xc5\x4c\xab\x3a\xe9\x87\x00\xe1\x0e\x05\xe8\x75\x65\x56\x1a\x1e\x10\x52\x89\x20\x2a\xdd\x04\x92\x8b\x55\xfd\x62\xfe\x57\xc9\x35\x5e\x3f\x69\x74\x2f\xdc\x0b\xef\x68\x6f\x51\x5b\xe5\xbe\x70\xac\xcf\x70\x6d\xd8\x1b\xed\x8e\x07\x8e\x55\xc7\x0b\x38\x3b\x99\x8a\xe7\xe7\xda\xad\x66\xdf\x83\x61\xf7\x84\x27\x24\xc1\x14\xa2\x69\xfc\x69\x1c\xdd\x3a\xd6\x49\xc0\x52\xe1\x5f\x3b\x93\xbb\xe0\x2a\x0e\x61\x11\xc6\xcd\xd1\xa4\xa8\x24\x70\x06\x3b\x1b\x25\x99\x8a\x15\xb6\x33\x58\x33\x58\x65\xbc\x4f\x0f\x79\x6d\x02\xb3\x26\x10\xb2\xb7\xcb\x2f\x9b\xf9\xfc\x65\xa8\xfb\x61\x38\x99\x83\x5d\x8d\x7c\x2d\xb1\x21\x79\xb3\xe4\xc0\x10\xc2\x6f\xa3\x49\x12\x84\x81\xef\xfc\x03\xbd\x6f\x22\xd5\x4e\x82\x9d\xb9\xfe\x16\xa7\xc4\xf3\x30\x4e\xe6\xd1\x38\xba\x85\x9a\xf7\xdd\x57\xad\xff\xa6\xba\x07\xb5\x67\x48\xd4\x46\x0a\xb0\xa0\xb6\xdf\xa3\xfb\x3f\x01\x00\x00\xff\xff\xb7\x86\x27\x52\x88\x05\x00\x00")

func templatesSingletonCrdb_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonCrdb_upsertGoTpl,
		"templates/singleton/crdb_upsert.go.tpl",
	)
}

func templatesSingletonCrdb_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonCrdb_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/crdb_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0x86, 0x7, 0x46, 0xba, 0xad, 0x9c, 0xf2, 0x87, 0x63, 0xf2, 0x39, 0x8f, 0x91, 0xf2, 0x4, 0x5c, 0x29, 0x91, 0xf9, 0xde, 0x8c, 0xea, 0x84, 0xe2, 0xa1, 0xfa, 0xe4, 0xd4, 0xfe, 0x75, 0x99}}
	return a, nil
}

var _templates_testSingletonCrdb_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5f\x6f\xdb\x36\x10\x7f\x8e\x3f\xc5\x55\x40\x5a\x29\x55\xe9\x3d\x67\x10\x32\xc7\x76\x8a\xa0\x68\xd2\xd9\x06\xba\x01\x7d\x28\x2d\x9d\x6c\x22\x12\x29\x93\x54\x5d\xaf\xc8\x77\x1f\xf8\x47\x91\xe4\x28\x6d\xb0\x6e\x7b\x4a\x7c\xf7\xe3\xfd\xf9\xdd\xf1\x78\xfa\x42\x25\xc8\xcd\xd7\xe9\xec\xf2\xea\x0e\x0f\x90\x80\xc4\x0d\x7e\xad\xc8\xfb\x5a\xe9\xa9\x28\x2b\x56\x60\xf8\x39\xbc\x28\xa3\x30\xfc\xc4\xa3\x8b\x4f\xea\xf5\xf4\xf6\x66\xb9\x5a\x4c\xae\x6f\x56\xe4\xec\xe2\xea\x76\x31\xbf\x7e\x7b\x03\xef\xe6\x7f\x92\xb3\x8b\x4f\x3c\x7a\xfd\x39\x1a\x8d\xf4\xa1\x42\x48\x65\xb6\x5e\xa1\xd2\x28\x41\x69\x59\xa7\x1a\xbe\x8d\x00\xb2\xf5\x54\x70\x0e\x67\x6a\x57\x90\xd9\xe5\xc8\x4a\x6e\x68\x89\x60\x40\x8c\x6f\x46\x00\x5b\xa1\x34\x40\x47\x50\x2b\x94\x3d\x41\x45\x95\xea\x09\x94\x2a\x4a\x91\x61\x07\x21\xa4\xb5\xc1\xb8\x36\x3e\x34\x2a\x3d\xbb\xb4\x7e\x3c\xe4\x7e\x34\xca\x6b\x9e\x02\xe3\x4c\x87\x91\x0f\xed\x3d\x65\x1c\x12\x78\xd9\x86\xfe\xed\xde\x20\xc7\x63\x50\xa8\xeb\x0a\xb2\xba\xac\x14\xe8\x2d\x42\x46\x35\x5d\x53\x85\xa0\xd2\x2d\x96\x14\x28\xcf\x80\x95\xc6\xad\x02\xa6\x8d\x5f\x01\x14\x34\x1a\x11\x95\x07\x90\x94\x67\xa2\x2c\x0e\xc6\xd6\x06\x39\x4a\xaa\x31\xb3\x71\x75\x4c\x09\xd0\x5b\xaa\xad\x54\x41\x4a\x39\xac\x11\x64\xcd\x81\x6e\x28\xe3\x4a\x1b\xc3\xb5\x62\x7c\x63\x22\xe8\x1b\x52\xbb\x62\x2d\x58\x81\x12\x6e\x17\xef\xa1\xa2\xe9\x1d\xdd\x20\x71\x29\x86\x29\x9c\xb5\x19\x45\x2e\x95\x30\x02\x94\x52\x48\x9b\xb9\x69\x02\x94\xd2\x49\x0c\x5f\x29\xf1\x55\x49\xe0\x0b\xab\x50\x92\xb7\xa8\x97\x96\xb8\x30\x30\xa6\x48\xb6\xe6\xb4\xc4\x20\xb2\x58\x5b\xb0\xa7\x90\x46\xe9\x71\xb6\x8e\x4f\xe1\x8c\xd2\xe3\x6c\x79\x9f\xc2\x19\x65\x83\x33\x45\xee\xe0\xae\xb9\x6e\x40\x42\x36\x4e\x9b\xd6\x78\xca\x9e\xd7\x5b\xf4\x78\x0c\x53\x89\x54\x23\x50\x5f\x30\xf6\x17\x66\x90\xad\xc1\x64\x4b\xac\xbd\x4e\x2b\x25\x2d\x88\x2c\x35\x5d\x17\xe8\x14\x61\x43\x5f\x64\xb8\x64\xb9\xe5\x36\x31\xa4\x4a\x51\xad\xec\xf9\x30\xfa\xd5\x4a\x5f\x24\xc0\x59\x61\x8b\x00\x20\x51\xd7\x92\x1b\xf9\x08\xe0\xbe\x7f\x34\xb5\x71\x3d\xff\xb0\xe9\xe7\xba\xac\xa6\x65\x06\xe7\x09\xe0\x57\x4c\xc9\x54\x94\x25\xe5\x59\x18\xa4\x22\xbd\x93\x82\xa6\xdb\x20\x86\xc0\xa0\x82\xf8\xa1\xe2\x31\x04\x6f\xde\x30\xae\x30\xad\x25\x06\xf6\x97\x41\xbc\x31\x1c\x25\xae\xd7\x1d\xb1\x36\x9e\x1f\x9b\x57\xbb\xc2\x5b\xf1\x5d\x6e\x7d\xb5\x24\xf6\xfd\x59\xc2\x64\x0c\x7b\x63\x95\x09\xf2\x81\x55\x18\x46\x6d\x2e\x64\xa9\x33\x51\x9b\xa2\xef\xbb\x31\x18\xb1\xbd\xb9\x1c\xf7\x57\xef\xf0\x30\x43\xa5\xa5\x38\xa0\x0c\xdb\xd1\x16\x83\xec\x97\xa3\x35\x49\xa5\x1e\xa4\xb4\x4b\xaa\x90\x8a\x7c\x94\xb4\x0a\x51\xca\x18\x82\x9c\xb2\xc2\xdc\x5f\x01\xca\x1c\x87\x57\x0f\x49\x5b\xbb\xaf\x20\x75\x6c\x58\xae\xfa\xa5\xec\x04\xfd\xef\x3a\x56\xbb\xe2\xd8\xef\x50\xbe\x1f\x29\xfb\x09\xaf\x7b\xca\x34\xe4\x42\xfe\xd8\xf1\x78\x0c\x93\xdc\x4c\xff\xa6\x0f\x99\x82\x4c\x70\x8c\x21\x2d\x84\x42\x3b\x45\xf7\x92\x69\x04\xe4\x19\x88\xdc\x0a\x2a\x56\x61\x37\xe8\x3d\x99\x1a\xf0\x3f\x8f\xd7\xf9\x32\x66\x07\x28\x69\x6b\xf1\x7f\x91\xe2\x8d\x71\x56\x3c\xbc\x40\xc7\xe3\x59\xd6\x7c\x5a\x66\xa1\x32\x2d\x1d\x37\x16\xfc\xb3\x15\x03\x95\x1b\x05\x84\x10\xf7\xbb\x3b\xc4\xd3\x81\xbb\xe8\x4f\xbb\x63\x84\x90\xc8\xe1\xc8\x9c\x7f\x81\x04\x84\x32\xff\x30\x29\x78\xd8\x5c\x8d\x02\xb9\xf3\x1c\x19\x1a\x7e\xf1\x24\xa4\x9d\x2b\xe6\x1c\x2b\x72\x83\xfb\x05\xd2\x0c\xa5\xc7\x37\x19\x2a\x77\x43\xcf\x13\x78\xb9\x3e\x68\x54\xe4\xb2\xce\x73\xfb\x90\x5a\x9d\x21\x78\x50\x97\x76\x6f\xb7\x33\xd2\x4a\x5d\xb9\xdc\xf1\xb6\x80\xe7\x89\xd5\x2f\x6a\x3e\x58\xba\xbc\xd4\xe4\x83\x64\x5c\x17\x3c\x6c\x8a\x25\x6b\xce\x19\xdf\x9c\x07\x0f\xcc\x3a\x6e\xa2\x47\x27\x5c\x08\xc4\xbf\x15\xd1\x20\x00\xa5\x3c\x02\x3c\x9e\xc2\xcf\xa8\x78\x7f\xb6\x77\x4a\xaa\x74\x69\x99\x34\x6e\x97\x95\xf1\x9b\x87\xc1\x74\x31\x9f\xac\xe6\x30\x9b\xac\x26\x97\x93\xe5\x1c\x4e\xd5\xd1\x48\x8d\x5a\xaf\x29\xf1\xdd\x14\x98\x21\x3c\x3c\x98\xfb\xc3\xde\xb4\x4f\xad\xcd\x0f\xe3\x3c\x7a\x32\xe6\xee\x53\xf6\xa3\x88\x67\x8b\xdb\x0f\x6d\xbc\xd7\x57\x30\xff\xe3\x7a\xb9\x5a\xc2\xa9\x82\xe9\x64\x39\x9d\xcc\xe6\xff\x71\x06\xe3\x31\x68\xa4\x32\x13\x7b\x0e\x5e\xad\x20\x2d\x90\xf2\xba\x02\x4d\xd5\x9d\x82\xfd\x16\xb9\x9d\x40\x6e\xf9\xca\x19\x67\x6a\xdb\xb4\xcb\x30\x05\x8d\xc9\xef\xac\x52\xfd\xd7\xdf\xae\xbe\xdf\x19\x68\x8f\xde\xff\xe6\x0c\x58\xd4\x4f\x2d\x13\xcf\xec\x44\xc1\x4d\x3a\xa1\x5f\xcf\x63\x97\x86\x5b\x8f\x59\xde\xc6\x33\xe4\xa9\x51\xc6\xd6\x83\xf7\x79\x4c\x47\x0b\xf2\x57\x7a\x57\x90\xdb\x0a\x79\x18\x54\x42\xe9\x8d\x44\xd3\xcc\xeb\x9a\x15\xd9\xef\x35\xca\x83\xbf\x5c\x6e\x75\x8c\xfd\x6a\x78\xbc\x40\xb8\x05\x34\xf6\x0b\x61\xdc\xee\x7c\xf6\x4e\x7a\xc6\x86\x22\xe6\xac\x88\x07\x08\xea\x27\xd2\x50\xf5\x28\x28\x17\x92\x0b\xc8\xad\xc3\xb1\xfb\x74\x69\x46\xb5\x5d\x4f\x19\xd7\xf1\xd1\xe7\x49\xe4\xff\xc2\xb7\xd1\x89\xe1\xa7\xae\x9a\x8f\x92\x13\x96\xbb\x8f\x9d\x17\x09\x04\x81\xd1\x9f\xd4\x15\x24\x56\x36\x3a\xb9\xb7\x7a\xbb\x1c\x1f\xe9\x7b\xb7\xed\x54\x9d\xdb\x91\x50\x57\x2e\xba\xc8\x9c\x1c\x9d\xf8\xe4\x7a\xd0\x86\xf3\x5d\x71\x3e\x1e\x9f\xaa\xdf\xcc\xd1\x6c\x7c\xaa\x2e\x7c\xc0\xc9\x83\x21\xc7\xb0\xe3\xb7\x49\xb6\x61\x79\x74\xff\x77\x00\x00\x00\xff\xff\xfc\xd3\x7b\x2d\x45\x0e\x00\x00")

func templates_testSingletonCrdb_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_main_testGoTpl,
		"templates_test/singleton/crdb_main_test.go.tpl",
	)
}

func templates_testSingletonCrdb_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0x60, 0x2c, 0xb9, 0xa2, 0xea, 0x64, 0x9f, 0x8e, 0xf7, 0x7a, 0x2b, 0x12, 0xa9, 0x8c, 0x1b, 0xc2, 0x59, 0xf1, 0x35, 0xef, 0x12, 0x0, 0x50, 0xff, 0x89, 0x27, 0x3b, 0x25, 0x99, 0x5c, 0xc6}}
	return a, nil
}

var _templates_testSingletonCrdb_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\xca\x83\x30\x10\x84\xef\xff\x53\x0c\xe2\x41\x7f\x34\x0f\xf0\xc3\x7f\xea\xa9\x3d\xf4\x50\xec\x03\xa4\x75\x95\x40\xba\x15\xb3\x42\x21\xe6\xdd\x8b\x31\x58\x7b\xcb\x64\xe6\xdb\x9d\xed\x26\xbe\xa3\x21\x27\xd7\xc1\xd1\x28\x85\xe0\x57\xc8\x89\xe1\x5e\x35\x25\xfc\x0f\xe0\x7d\x8d\x51\x73\x4f\xc8\x0d\xb7\xf4\xaa\x90\x8b\xbe\x59\xc2\xdf\x3f\x54\xb3\xbc\x5c\x08\x29\x67\xba\x64\xaa\xa3\x3b\x3d\x0d\x47\x1b\xf5\xe6\x93\x75\x7b\xb9\x66\xcf\xfa\x11\x87\x25\x32\xca\x19\x83\x9d\x46\x6d\x31\x43\x8c\x58\x3a\xe8\x0d\x14\x75\x99\xb8\xc8\xbc\xff\xd0\x21\x64\x15\x96\xda\xdf\x9f\xeb\x49\x65\x5c\x46\xdc\xee\x7b\x24\x15\xde\x01\x00\x00\xff\xff\x91\x6e\x4f\x2d\xff\x00\x00\x00")

func templates_testSingletonCrdb_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_suites_testGoTpl,
		"templates_test/singleton/crdb_suites_test.go.tpl",
	)
}

func templates_testSingletonCrdb_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3c, 0xee, 0x2e, 0x96, 0xb6, 0x68, 0x8e, 0xe6, 0x13, 0x5b, 0x19, 0xc, 0x3f, 0x8d, 0xbd, 0x45, 0xf6, 0x91, 0xd7, 0x45, 0x15, 0xdd, 0x12, 0x15, 0x2a, 0x56, 0x1f, 0x17, 0xb9, 0xb8, 0xb3, 0x99}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4f\x6f\xdb\x3e\x0c\x3d\x5b\x9f\x82\xbf\xe0\xb7\x41\x1e\x5c\x15\xbb\x76\xc8\xa1\xff\x0e\xc5\xb0\x20\x68\x9c\xf3\xa0\xda\x74\x2a\x44\x91\x0c\x89\x5e\x92\x19\xfa\xee\x83\xe4\xb4\x4d\xdb\x74\x08\x86\x0d\xc3\x0e\x89\x2d\xe1\xf1\x3d\x92\x8f\x74\xdf\x9f\xc0\xff\x52\x2b\xe9\xe1\x6c\x0c\xe2\x3c\xbe\xa1\x17\xa5\xbc\xd3\x08\xc3\x43\x4c\xe4\x0a\x43\x60\x4d\x67\x2a\x20\xf4\xd4\xf7\x43\x84\x98\xb7\x53\xdd\x39\xa9\x43\x98\xb7\x1e\x1d\x71\x82\x0f\x11\xa0\xcc\x42\x94\x39\xf4\x2c\x23\x31\x95\x4e\x6a\x8d\x9a\xe7\x8c\x65\xaa\x01\x8d\x86\x3f\x12\x5c\xd9\xb5\x99\x29\xb3\xe8\xb4\x74\x21\x5c\x5a\xdd\xad\x8c\xcf\x61\x3c\xfe\x19\x6c\xea\xd4\x4a\xba\xed\x67\xdc\x3e\x06\xf4\x2c\xcb\x48\xcc\x96\xaa\xe5\xa3\xf8\xdf\x2a\xb3\x00\x4a\x35\xac\x15\xdd\x83\x35\x7a\x0b\xed\x10\x07\x4b\xdc\x42\x35\x44\x8e\x72\x96\x05\xc6\x32\x8f\x58\xc7\xfa\x9d\x34\xb5\x5d\xa9\xef\x28\x26\xb8\x9e\x21\xd6\x3c\x67\xd9\x37\xe9\x00\x5d\xfa\x59\xc7\xb2\xd3\x53\x38\x27\xc2\x55\x4b\x40\xf7\x08\x37\x93\xd9\xf5\x6d\x09\x5e\xd5\x08\xb6\x01\x69\x60\x3e\x8d\x37\x2c\xb3\x91\x71\xaf\x57\x4f\x15\xf4\x21\xb5\x22\x92\xee\x6b\xce\xc8\x75\x15\xf1\x98\x4c\x01\xef\x6d\x01\x6f\x34\xe0\xea\xa2\xdc\xb6\xe8\x0b\x20\xd7\x61\xfe\x29\xf1\xfc\x37\x06\xa3\xf4\xae\x11\xd7\x31\xd3\x86\x8f\xe6\x26\xb5\x80\xec\x93\xc8\xe1\x84\xc0\x27\xe9\x33\x78\xe7\x47\x45\xe4\xdb\xf5\xa5\xef\x55\x03\xc6\x12\x88\x89\xbd\xb4\x86\x70\x43\x21\x54\xb4\x89\x95\x55\xc3\x59\x5c\xc8\x6a\xb9\x70\xb6\x33\x35\xcf\xfb\x1e\x4d\x1d\x02\xcb\x06\xc8\x97\xce\x53\xb9\xe1\x89\x65\x9f\xe1\xd5\xc5\x9d\x55\x5a\x5c\xe0\x42\x99\xc4\xa1\x3d\xee\xdf\x95\x1b\x5e\xd1\xa6\x88\x05\x3e\x28\x1c\x05\xca\x59\x56\x63\x83\x0e\xe2\xe4\xf2\x1c\x7a\xf8\x0a\x63\xa0\x8d\xb8\xb5\x5a\xdf\xc9\x6a\xc9\x73\x08\xd1\xe1\x47\x2f\xac\xd8\x0d\xf2\x5b\x85\x47\x4f\xd0\xd4\x70\x12\x02\xc4\x53\x23\xb5\xc7\x24\x5a\x40\xca\xe5\xc6\x34\xe8\x78\xfe\xfc\x74\x9c\x47\x5d\x92\x3e\x6c\xd0\x2b\x67\x2a\xdb\x19\x4a\x17\x2f\xa6\xec\x61\x23\x79\x2e\x2e\x23\xe6\xc8\x52\x9e\xba\xf0\x3a\x4b\xfe\x20\x1b\x21\x49\x38\x82\x3e\x3e\x83\x8c\xd6\xd2\x10\x58\x83\xe0\xb0\xb2\xae\x2e\x60\x61\xe9\x6c\x54\x0c\xf8\x5d\xd2\x2f\x56\x67\x3e\xbd\x3a\x2f\xaf\x0f\xad\xce\xef\x58\x8e\x9d\x35\xc7\x7e\x44\x84\x10\x7f\x74\x95\x7e\x7d\xc6\xe2\x96\xff\xe5\x11\xfb\x47\x26\x2c\xfc\x08\x00\x00\xff\xff\x3e\xf4\x07\x51\xce\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x66, 0x85, 0xb7, 0x95, 0xff, 0xda, 0xe2, 0x2d, 0x72, 0xc5, 0x95, 0x96, 0x16, 0xb6, 0x96, 0xb3, 0xb9, 0xdd, 0xe, 0x31, 0x38, 0x14, 0x5d, 0xea, 0x8b, 0x74, 0x4f, 0xcf, 0x25, 0xb2, 0xe2, 0x9a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl": templates17_upsertGoTpl,

	"templates/singleton/crdb_upsert.go.tpl": templatesSingletonCrdb_upsertGoTpl,

	"templates_test/singleton/crdb_main_test.go.tpl": templates_testSingletonCrdb_main_testGoTpl,

	"templates_test/singleton/crdb_suites_test.go.tpl": templates_testSingletonCrdb_suites_testGoTpl,

	"templates_test/upsert.go.tpl": templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"crdb_upsert.go.tpl": &bintree{templatesSingletonCrdb_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"crdb_main_test.go.tpl":   &bintree{templates_testSingletonCrdb_main_testGoTpl, map[string]*bintree{}},
			"crdb_suites_test.go.tpl": &bintree{templates_testSingletonCrdb_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
