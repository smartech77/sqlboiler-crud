// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl
// override/templates/singleton/crdb_upsert.go.tpl
// override/templates_test/singleton/crdb_main_test.go.tpl
// override/templates_test/singleton/crdb_suites_test.go.tpl
// override/templates_test/upsert.go.tpl

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdf\x6f\xdb\x36\x10\x7e\x96\xfe\x8a\x6b\x30\x20\xd2\xe0\x28\x7b\xce\xe0\x87\x26\x69\xbb\xa2\x6b\xea\x35\xcd\x0a\xac\x28\x02\x5a\x3a\xd9\x84\x69\x52\xa5\xa8\xa4\x9e\xa6\xff\x7d\x38\x92\xb2\x24\xff\x68\xdc\x76\xdd\xba\xa7\x58\xe4\xf1\xee\xe3\x77\x1f\x79\xc7\xd4\xf5\x09\xfc\xc0\x04\x67\x25\x9c\x8d\x21\x79\x4c\xbf\xb0\x4c\xde\xb0\xa9\x40\x70\x7f\x92\x2b\xb6\xc4\xa6\x09\xad\x69\x99\xce\x71\xc9\xdc\x34\x2d\xe8\x2c\xe0\x2f\x48\xae\xbb\x59\xbb\x80\xe7\x90\x3c\xce\xb2\x67\x42\x4d\x99\x80\x93\xa6\x09\x4f\x4f\xe1\xa6\x28\x51\x9b\x67\xc0\x8c\xc1\x65\x61\x4a\x60\x12\xb8\xa4\xb1\x11\x30\x99\x41\xa6\xd0\x8e\x55\x45\xc6\x0c\x82\xd2\xc0\x67\x52\x69\x04\x25\x21\x55\x32\x17\x3c\x35\x49\x98\x57\x32\x85\x48\xc1\x8f\x75\xed\xf0\x27\x37\xc5\x35\x97\xb3\x4a\x30\xdd\x34\x71\x1b\x25\xb2\x20\xa4\x32\x90\x5c\xa9\x0b\x25\x0d\x7e\x34\x4d\x93\x9a\x8f\xe4\x8a\x3e\x12\x3f\x38\x82\xba\x46\x99\x11\x48\x1f\xf9\x95\xbc\xf0\xd1\x60\xaa\x94\x18\xad\x83\x5f\x28\x51\x2d\x65\x09\xef\xde\x97\x46\x73\x39\x1b\xf9\x05\x7e\x7c\xe4\x77\xd3\x9a\x4d\x15\x17\x89\xff\x88\x01\xb5\x56\x1a\xea\x30\xd0\x68\x2a\x2d\x41\x25\x0e\xa9\x03\xda\x07\x69\xd7\x3d\x43\x73\x79\x1e\xc5\x75\x8d\xa2\x44\x0b\x7c\x04\xed\x84\xb7\xf4\xf3\x32\x6b\x9a\xd1\x16\xf4\x2d\xd4\x9f\x06\x1b\x87\x4d\x18\xae\x89\x08\x5d\x0a\x29\x29\xbd\x34\xd2\xcf\x09\x93\x3c\xdd\x48\xe8\xe4\xeb\x32\x0a\xd6\x67\x49\x63\x96\xa3\x83\x53\x3c\xf9\xee\x72\x5c\x87\x01\xcf\x69\x17\x74\x44\xbe\xb3\x04\xff\x6c\x71\x3d\x1a\x83\xe4\x82\x80\x06\x05\xd1\x1e\xd9\x90\x6f\x35\x2b\x9e\x68\x1d\xa1\xd6\x71\x1c\x06\xcd\x2e\x31\xec\xc9\xfe\xae\xe4\x43\x55\x72\x39\xa3\x6f\xfc\x88\x69\x65\x94\xfe\x9c\x03\xde\x73\x5d\x7c\x99\x32\x26\xdb\x94\x13\x10\x47\xef\x13\x0f\xa9\x47\xfc\xb6\x5c\x3a\x73\x3f\xd4\x5b\xb5\x3b\x1d\xff\x92\x8c\x76\x88\xbd\x2f\x6e\xc2\xfd\x9f\x4a\x65\x9d\xbc\x6f\x21\x8b\x6b\xc4\x01\x53\x90\xa9\xb4\x5a\xa2\x34\xcc\x70\x25\x21\x57\x1a\xe6\xea\x1e\x8c\x82\x42\xab\x02\xb5\x58\x41\x55\xe2\x70\xaf\x36\xe2\x60\xbb\x87\xaa\xea\x7f\x2e\xaa\x75\xfd\xe1\x39\x28\x18\x77\xc9\xf5\xf5\xc8\xce\x97\xc9\x15\xde\x47\x47\x75\x9d\x4c\x16\x33\x57\xfe\xcf\x40\x2a\xa8\xeb\x41\x4b\x40\xfc\xde\xf1\x0c\x33\xcb\x79\x65\xe9\x39\xb2\x6a\x08\x03\xea\x16\x28\xf3\x82\x72\x79\x64\xf8\x12\x4b\xc3\x96\xc5\xad\xb3\xba\x9d\xa3\x28\x50\x1f\x41\x02\x8d\xb3\xee\x44\xfd\x8b\x52\x8b\xd2\xca\x68\x20\xff\x4c\x9d\x63\xae\x34\xba\x2c\x58\xa3\x83\xcf\xc2\xb6\x94\xbb\xdd\x12\x5c\x8b\xd6\x92\x1f\x86\x81\xfc\xf3\x12\x73\x56\x09\x63\x5b\xa2\x0f\x15\x6a\x8e\x65\x72\xa5\xe4\x1f\xa8\x95\x9f\xba\x46\xd2\x81\x57\xc9\xa5\xba\x97\x9d\x4e\x3c\xd3\x6f\xb9\x99\x7b\xe3\x11\xa8\x38\x0c\x83\xd3\x53\x38\xaf\xb8\xc8\x20\x65\xe9\x1c\x61\x81\x2b\xe0\xf2\x44\x70\x89\x50\xcd\x04\x17\x2b\x38\x81\xe5\xaa\xfc\x20\xe0\xae\x84\x82\xfe\x16\x5a\x4d\x05\x2e\xcb\x30\x98\x56\x39\x81\x29\x8d\x5e\x32\x39\x13\x48\xd5\xe1\xbc\xca\x73\xd4\x51\x6c\x69\xda\x92\x0c\x6d\x72\x5a\xe5\xc9\x5b\xcd\x0d\x9e\xaf\x0c\x46\xc7\xe6\x98\x72\x03\x24\xcd\x5d\xd3\xb9\x9d\x0e\x37\x87\x13\x1a\xa6\xfc\xde\x8e\x20\x25\x10\x9a\xc9\x19\x6e\x89\x71\xe0\xf0\xda\xea\x32\x4a\xf7\x3b\xdc\x34\x2d\x8d\x4e\x95\xbc\x4b\x9e\x1b\xc5\xa2\x81\x9c\x93\x17\x5c\x66\xf1\x4e\x0c\x43\xbb\x0b\x25\xfe\x59\x18\xc3\xeb\x61\x3f\x8c\xa1\xdd\x97\xc0\xd8\xf6\xd9\x13\xe1\x27\x7c\x91\x86\xce\xc6\x40\xb3\x7e\x22\x0e\x83\x4e\x24\x93\xaa\x15\xc9\xb4\xca\x63\x7b\xcc\x76\x4a\xd6\x1d\xa9\x0b\x92\xe5\xcb\xca\x24\xaf\x7f\x55\xe9\x82\x3c\x59\xa1\x8e\x9c\x5e\x33\x0a\xf4\xf0\xfa\x77\x0b\x5c\xbd\x3f\x38\xd0\x8d\x14\x2e\x54\x18\xdc\x31\x6d\xcf\xa8\xbd\x7f\x42\xab\xe9\x47\x3e\x30\x11\xd0\xb6\x93\x1a\x0d\x01\x19\x52\xfe\xbc\xf7\x45\x27\x33\x0c\x82\x7d\x08\xda\x3b\xf2\x61\x93\xfe\x01\x3e\xcc\x5a\x55\xa6\xbf\xa0\x4b\x21\x7d\xc6\x61\x10\xf8\xca\x76\x36\xde\x50\xee\x4d\xef\xeb\xeb\xf1\x4f\x34\x5f\x32\xbd\x7a\x81\xab\x9e\x31\x51\x4c\x9c\x0a\x94\xfe\x78\xc5\x74\xf9\xff\x64\xc9\x7d\xf8\xee\xaf\xa4\x7d\xf1\x19\xe5\x6f\xf9\xcd\x4a\x40\xc5\xa9\x12\x99\xbd\x8b\xa7\xf6\x92\xf3\x7b\x4d\x2d\x04\x10\xbc\xb4\x95\xc1\x96\x86\xa0\xbd\x3b\x88\x89\x8d\x7b\xa4\x43\xd9\x4e\xf4\x71\xae\x17\x8e\x61\xc9\x16\x18\x75\x15\x90\x56\x1c\xca\x07\x9d\x62\xf2\x55\xac\xd6\x41\x46\xfb\xa4\xbd\xbd\xd8\x6e\x22\x70\x67\x23\xa1\xea\xb0\x82\xb1\xdb\xb3\x53\xf7\x6f\x34\x74\xa1\xd2\x85\x56\x2c\x9d\x5f\x9e\x47\x19\x67\x02\x29\xc4\x51\x5d\xf7\xdf\xcf\x4d\x73\xb4\xab\x47\xd3\x68\xda\xe1\xae\xe4\xb7\x35\xdd\xa6\xd1\x85\xbe\x63\xa2\xc2\x97\xac\x28\xec\xfe\xe9\xe8\x74\xc5\xea\x9c\xcb\xcc\x4f\xed\x63\xe5\xcd\xaa\xc0\xbd\xbb\x5e\xbb\x6d\xa3\x06\x6d\x29\xee\x95\xd0\x41\x0d\xb5\x9c\xf8\xcc\x69\x34\x31\x19\xb6\x49\xb3\x70\x35\x9a\x6f\x0d\x96\xe2\x52\xc0\x1d\x50\x87\x58\x2d\xd8\xc6\xf5\x29\x96\x46\x7b\xef\x62\x4e\x69\x4a\x9e\xcb\x8c\x6b\x4c\x4d\xd4\x0e\xfc\x4e\x16\xaf\xf2\x48\x91\x6e\xee\x98\x18\xb4\x05\x76\xb2\x7c\xaa\xd5\xb2\xdd\x82\x75\xe8\x2f\xcd\x41\x92\x62\x77\xc9\x39\x24\xd4\xbd\x71\x69\x50\xe7\x2c\xc5\xda\xb5\x3a\x56\xf5\x1b\x64\xf5\x88\x6c\x17\x76\xc1\x27\x46\xef\x0f\xdd\xf3\xe1\x76\xca\x73\xd7\x0a\x5e\xe2\xb4\x9a\xbd\x54\x99\x6b\x02\xf2\xa5\x49\x9e\x16\x9a\x4b\x23\x64\xd4\xcd\xdb\x62\xa3\x5b\x5f\x56\xe6\xf1\xc3\xd6\xc4\x4e\x17\xed\x81\xfd\x6c\xf4\xd1\xae\xe3\x0b\x9c\x36\xa8\x69\x4b\xec\x49\x7a\xad\xee\xa3\x1e\x08\x17\x23\x49\x92\x38\xb9\x4e\x99\xd5\x1a\x91\x42\x03\xd6\xa5\x6d\x6e\xf6\x7a\xf2\xa1\x22\xdb\x22\x7e\x8e\x57\xff\xae\x59\x6b\x6b\x3c\x86\xf2\x83\x48\x9e\x68\x7d\xa5\x5e\xab\x7b\x57\xa4\x7d\x44\x12\xdd\xe9\x29\xd0\x15\x90\x2a\x6d\xef\x00\xfb\xb6\x91\xc7\xc6\x27\x1f\x98\x5c\x99\x39\x3d\x82\xee\xe7\x28\xc1\xcc\x51\xe3\x71\x49\x0d\xb6\x3b\xf7\x5e\x9d\x5d\xa7\xb6\x9b\xaa\xdb\xf6\x24\xd9\x3d\xd2\x2b\x62\x37\x53\x9b\xc4\x6c\xaf\x7b\x98\x97\x21\x0d\x5d\x6b\xbe\xb3\xa5\xa6\x22\x42\x0f\x44\x7a\x1d\xda\x6b\xef\x73\x4a\xc9\x51\x27\xa0\x7e\x03\x70\x58\x47\xd1\x76\x2e\x07\x98\xdb\x4e\x05\xc6\x6e\xbb\x07\x07\x58\x77\x2c\xc1\x27\x9e\x2d\xeb\x7f\xed\x65\xea\x71\x6e\x50\x7f\xd1\x93\xc5\x3f\x4a\xd6\x69\xf3\x4e\x25\x17\xfd\xe7\x4a\xf3\x77\x00\x00\x00\xff\xff\x3f\x7f\x14\x99\xc1\x15\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0x25, 0x8a, 0x2a, 0x8a, 0x35, 0x9, 0xc0, 0xa6, 0x83, 0xa9, 0xd4, 0xf4, 0x43, 0xd6, 0xeb, 0x73, 0x3f, 0xf0, 0xeb, 0xaa, 0x4d, 0x26, 0x23, 0xb6, 0x45, 0xc, 0xe2, 0x40, 0xa9, 0x10, 0xa5}}
	return a, nil
}

var _templatesSingletonCrdb_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6f\xe2\x38\x14\x7d\xb6\x7f\xc5\x6d\xa4\xaa\x89\x64\x85\xed\xeb\x4a\x3c\xb4\x24\xed\xb2\x42\xa1\x40\xd8\x1d\x69\x34\x0f\x26\xb9\x01\x6b\x82\xc3\xf8\x83\xb6\x9a\xf2\xdf\x47\xce\x07\xa1\xa5\xd3\x51\x25\x64\x90\xef\x3d\xc7\xc7\xc7\xe7\x32\x18\xc0\xca\x8a\x32\x5f\xee\x34\x2a\x33\xb3\xa8\x9e\x47\x55\xf6\x5d\x55\x3c\xdb\x44\xb7\x4d\x4d\x03\x87\xc5\x6c\x02\xda\x70\x83\x5b\x94\x06\xb4\x51\x42\xae\xc1\x6a\xb7\x9a\x0d\x82\xad\xe1\x11\x37\x1c\x76\xaa\xda\x8b\x1c\xf3\x90\x16\x56\x66\x1f\xb1\xfb\xb9\xe0\x90\x2b\xb1\x47\xa5\xc3\x48\xf0\x12\x33\xc3\xc0\xf0\x55\x89\x09\xdf\x62\x7b\x0a\x03\xbb\xcb\xb9\xc1\xa9\x1c\x55\xb2\x28\x45\x66\x60\x55\x55\x25\x03\x85\xa6\xab\x31\xc8\xda\x1a\x83\xc7\x8d\x30\x58\x0a\x6d\xe0\xeb\xb7\x86\x21\xe8\xf4\xfe\xa4\xa4\xeb\x83\xa1\xdb\xdc\x72\xb9\x2e\x31\x1c\xe7\x28\xcd\xcc\x56\x06\x17\xa5\xc8\xd0\xe9\x0a\x27\x33\x06\xee\x7b\x3e\xeb\xc9\x03\x4a\x7a\xf6\xcf\x10\x1c\x51\x01\x25\x0a\x3f\x87\x55\x68\x02\x4a\xc9\xca\x16\xf0\xf7\x29\xee\x1e\xcd\xad\x2d\x0a\x54\x7e\x40\x49\x8e\x05\xaa\x93\xe2\x83\xed\x8a\x2b\x5b\x38\x78\x56\x95\x76\x2b\xb5\xa3\xf0\xa2\xf8\xee\x66\x39\x49\xe1\xbf\x9b\xc9\x32\x5e\x78\x94\x88\x02\x4a\x94\x7e\xaf\x12\x2e\x86\xf0\x97\xb3\xeb\x88\x1b\x42\xb1\x35\xe1\x62\xa7\x84\x34\x85\xef\xf9\x97\x3a\x68\xf1\xe0\x7e\x7b\x8c\x12\x42\x1a\x9b\x75\xf8\x6f\x25\x4e\xd8\x18\x78\x0c\xbc\xa0\xeb\xe8\x14\x96\x3c\xc3\x4d\x55\xe6\xa8\x74\x7d\xe7\xa5\xc6\xb1\xcc\xf1\xe9\xb4\xc0\xde\xe8\x62\x70\xcd\xe0\x3a\x08\x28\x39\x50\x4a\x9c\xa2\xbb\x56\x11\x25\xce\x21\x77\x86\x37\x4e\x16\xf1\x3c\x85\x71\x92\x4e\xe1\x52\xbb\xcf\x34\x81\xd1\x34\xb9\x9b\x8c\x47\x29\xd4\x4a\x8f\x19\x63\xfd\x15\x19\x25\xce\xa8\xc1\x00\xb2\x2e\xa2\x80\x4f\x3b\xcc\x8c\xae\x23\x7e\x4c\x0e\xee\x51\x82\xd9\x54\x76\x6d\xe0\x11\x81\x2b\x04\x59\x99\x26\x89\x42\xae\xeb\xa7\x0a\xff\x57\xc2\xe0\xed\xb3\x41\xff\xca\xbf\x0a\x4e\xf6\x16\xb5\x47\xfe\x2b\xab\xfa\xf0\xd6\x4e\xbd\xd3\xee\x05\xe0\x39\x75\xa2\x80\x8b\xb3\x71\x78\x79\xa9\x6d\x6a\xf6\x03\x18\x76\x6f\x77\x46\x12\x4d\x21\x99\xa6\xff\x8c\x93\x7b\xcf\x59\x08\x58\x6a\xfc\x6d\xe7\xf2\x21\xba\x49\x63\x58\xc4\x69\x73\x34\x29\x2a\x05\x82\xc1\xde\x65\x48\x71\xb9\xc6\x76\xf8\x6a\x06\xa7\x4c\xf4\xb1\x21\x6f\x4d\x60\xce\x04\x42\x0e\x6e\xf9\xe1\xc2\x9e\xbf\x4e\x73\x3f\x05\x67\x03\xb0\xaf\x91\x6f\x25\x36\x24\xef\x96\x3c\x18\x42\xfc\x65\x34\x59\x46\x71\x14\x7a\x7f\x40\x1f\x9a\x2c\xb5\x23\xe0\x86\xad\xbf\xc5\x39\xf1\x3c\x4e\x97\xf3\x64\x9c\xdc\x43\xcd\xfb\xe1\xab\xd6\xff\x4f\xdd\x83\xba\x33\x14\x1a\xab\x24\x38\x50\xdb\x1f\xd0\xc3\xaf\x00\x00\x00\xff\xff\xe9\x90\x0e\x90\x81\x05\x00\x00")

func templatesSingletonCrdb_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonCrdb_upsertGoTpl,
		"templates/singleton/crdb_upsert.go.tpl",
	)
}

func templatesSingletonCrdb_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonCrdb_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/crdb_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0x40, 0x98, 0x24, 0x4a, 0x65, 0xcb, 0x7f, 0x9d, 0x3f, 0x7e, 0x80, 0xca, 0x9e, 0x44, 0xc2, 0x9, 0xd9, 0x24, 0xa2, 0xef, 0xbc, 0x5f, 0x9c, 0x3b, 0x39, 0xc, 0x8d, 0x61, 0x17, 0x6f, 0x5f}}
	return a, nil
}

var _templates_testSingletonCrdb_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4d\x6f\xdb\x38\x13\x3e\x47\xbf\x62\x2a\x20\xad\x94\xaa\xf4\x7b\xce\x0b\x21\xeb\xd8\x4e\x11\x14\x4d\xba\xb6\x81\xee\x02\x3d\x94\x96\x46\x36\x11\x89\x54\x48\xaa\xae\xb7\xc8\x7f\x5f\xf0\x43\x91\xe4\x2a\x9b\x00\xbb\x8b\x3d\x25\x9e\x79\x38\x1f\xcf\x0c\x87\xa3\x6f\x54\x82\xdc\x7e\x9f\xcd\x2f\xaf\xee\xf0\x00\x29\x48\xdc\xe2\xf7\x9a\x7c\x6c\x94\x9e\x89\xaa\x66\x25\x46\x5f\xa3\x8b\x2a\x8e\xa2\x2f\x3c\xbe\xf8\xa2\xde\xce\x6e\x6f\x56\xeb\xe5\xf4\xfa\x66\x4d\xce\x2e\xae\x6e\x97\x8b\xeb\xf7\x37\xf0\x61\xf1\x3b\x39\xbb\xf8\xc2\xe3\xb7\x5f\xe3\x20\xd0\x87\x1a\x21\x93\xf9\x66\x8d\x4a\xa3\x04\xa5\x65\x93\x69\xf8\x11\x00\xe4\x9b\x99\xe0\x1c\xce\xd4\x7d\x49\xe6\x97\x81\x95\xdc\xd0\x0a\xc1\x80\x18\xdf\x06\x00\x3b\xa1\x34\x40\x4f\xd0\x28\x94\x03\x41\x4d\x95\x1a\x08\x94\x2a\x2b\x91\x63\x0f\x21\xa4\xb5\xc1\xb8\x36\x3e\x34\x2a\x3d\xbf\xb4\x7e\x3c\xe4\x21\x08\x8a\x86\x67\xc0\x38\xd3\x51\xec\x43\xfb\x48\x19\x87\x14\x5e\x77\xa1\xff\x78\x30\xc8\xc9\x04\x14\xea\xa6\x86\xbc\xa9\x6a\x05\x7a\x87\x90\x53\x4d\x37\x54\x21\xa8\x6c\x87\x15\x05\xca\x73\x60\x95\x71\xab\x80\x69\xe3\x57\x00\x05\x8d\x46\x44\xe5\x01\x24\xe5\xb9\xa8\xca\x83\xb1\xb5\x45\x8e\x92\x6a\xcc\x6d\x5c\x3d\x53\x02\xf4\x8e\x6a\x2b\x55\x90\x51\x0e\x1b\x04\xd9\x70\xa0\x5b\xca\xb8\xd2\xc6\x70\xa3\x18\xdf\x9a\x08\x86\x86\xd4\x7d\xb9\x11\xac\x44\x09\xb7\xcb\x8f\x50\xd3\xec\x8e\x6e\x91\xb8\x14\xa3\x0c\xce\xba\x8c\x62\x97\x4a\x14\x03\x4a\x29\xa4\xcd\xdc\x34\x01\x4a\xe9\x24\x86\xaf\x8c\xf8\xaa\xa4\xf0\x8d\xd5\x28\xc9\x7b\xd4\x2b\x4b\x5c\x14\x1a\x53\x24\xdf\x70\x5a\x61\x18\x5b\xac\x2d\xd8\x53\x48\xa3\xf4\x38\x5b\xc7\xa7\x70\x46\xe9\x71\xb6\xbc\x4f\xe1\x8c\xb2\xc5\x99\x22\xf7\x70\xd7\x5c\xb7\x20\x21\x5b\xa7\x6d\x6b\x3c\x65\xcf\xeb\x2d\x7a\x32\x81\x99\x44\xaa\x11\xa8\x2f\x18\xfb\x03\x73\xc8\x37\x60\xb2\x25\xd6\x5e\xaf\x95\xd2\x0e\x44\x56\x9a\x6e\x4a\x74\x8a\xa8\xa5\x2f\x36\x5c\xb2\xc2\x72\x9b\x1a\x52\xa5\xa8\xd7\xf6\x7c\x14\xff\xdf\x4a\x5f\xa5\xc0\x59\x69\x8b\x00\x20\x51\x37\x92\x1b\x79\x00\xf0\x30\x3c\x9a\xd9\xb8\x5e\x7e\xd8\xf4\x73\x53\xd5\xb3\x2a\x87\xf3\x14\xf0\x3b\x66\x64\x26\xaa\x8a\xf2\x3c\x0a\x33\x91\xdd\x49\x41\xb3\x5d\x98\x40\x68\x50\x61\xf2\x58\xf1\x04\xc2\x77\xef\x18\x57\x98\x35\x12\x43\xfb\xcb\x20\xde\x19\x8e\x52\xd7\xeb\x8e\x58\x1b\xcf\xf3\xe6\xd5\x7d\xe9\xad\xf8\x2e\xb7\xbe\x3a\x12\x87\xfe\x2c\x61\x32\x81\xbd\xb1\xca\x04\xf9\xc4\x6a\x8c\xe2\x2e\x17\xb2\xd2\xb9\x68\x4c\xd1\xf7\xfd\x18\x8c\xd8\xde\x5c\x8e\xfb\xab\x0f\x78\x98\xa3\xd2\x52\x1c\x50\x46\xdd\x68\x4b\x40\x0e\xcb\xd1\x99\xa4\x52\x8f\x52\xda\x27\x55\x48\x45\x3e\x4b\x5a\x47\x28\x65\x02\x61\x41\x59\x69\xee\xaf\x00\x65\x8e\xc3\x9b\xc7\xa4\xad\xdd\x37\x90\x39\x36\x2c\x57\xc3\x52\xf6\x82\xfe\x67\x1d\xab\xfb\xf2\xd8\xef\x58\xbe\x9f\x29\x7b\xca\x6b\x51\x69\xf2\x49\x32\xae\x4b\x6e\xdc\xc5\x2f\x0f\x66\x4f\x99\x86\x42\xc8\xe7\xe3\xd9\x93\x59\x29\x14\x46\xb1\xb9\x6d\xd3\xc2\x3c\x0f\x6d\xa3\x32\x05\xb9\xe0\x98\x40\x66\x10\x76\xcc\xee\x25\xd3\x08\xc8\x73\x10\x85\x15\xd4\xac\xc6\x60\x9c\xcf\xff\x38\x31\x6f\x8c\xb3\xf2\xf1\x71\x39\x9e\xbc\xb2\xe1\xb3\x2a\x8f\x94\xe9\xd6\xa4\xb5\xe0\x5f\xa4\x04\xa8\xdc\x2a\x20\x84\xb8\xdf\xfd\xf9\x9c\x8d\x5c\x33\x7f\xda\x1d\x23\x84\xc4\x0e\x47\x16\xfc\x1b\xa4\x20\x94\xf9\x87\x49\xc1\xa3\xb6\xeb\x4b\xe4\xce\x73\x6c\xd8\xf9\x9f\xe7\x26\xeb\xdd\x1e\xe7\x58\x91\x1b\xdc\x2f\x91\xe6\x28\x3d\xbe\xcd\x50\xb9\xcb\x77\x9e\xc2\xeb\xcd\x41\xa3\x22\x97\x4d\x51\xd8\x37\xd2\xea\x0c\xef\xa3\xba\xac\x7f\x71\x9d\x91\x4e\xea\xaa\xe8\x8e\x77\x75\x3d\x4f\xad\x7e\xd9\xf0\xd1\x8a\xf6\xeb\xd9\x16\x4b\x36\x9c\x33\xbe\x3d\x0f\x1f\x99\x75\xdc\xc4\x3f\x9d\x70\x21\x10\xff\x0c\xc4\xa3\x00\x94\xf2\x08\xf0\xf3\x80\x7d\x41\xc5\x87\x63\xbb\x57\x52\xa5\x2b\xcb\xa4\x71\xbb\xaa\x8d\xdf\x22\x0a\x67\xcb\xc5\x74\xbd\x80\xf9\x74\x3d\xbd\x9c\xae\x16\x70\xaa\x8e\xa6\x65\xdc\x79\xcd\x88\xef\xa6\xd0\xcc\xd7\xf1\x99\x3b\x9c\xe3\xa6\x7d\x1a\x6d\x7e\x18\xe7\xf1\x93\x31\xf7\x5f\xa9\xe7\x22\x9e\x2f\x6f\x3f\x75\xf1\x5e\x5f\xc1\xe2\xb7\xeb\xd5\x7a\x05\xa7\x0a\x66\xd3\xd5\x6c\x3a\x5f\xfc\xcb\x19\x4c\x26\xa0\x91\xca\x5c\xec\x39\x78\xb5\x82\xac\x44\xca\x9b\x1a\x34\x55\x77\x0a\xf6\x3b\xe4\x76\x76\xb8\xbd\xaa\x60\x9c\xa9\x5d\xdb\x2e\xe3\x14\xb4\x26\xff\x62\x4b\x1a\x3e\xec\x76\xab\x6d\x27\xdb\x4b\x9e\xf6\xf6\x0c\x58\xd4\xdf\xda\x13\x5e\xd8\x89\x82\x9b\x74\x22\xbf\x79\x27\x2e\x0d\xb7\xf9\xb2\xa2\x8b\x67\xcc\x53\xab\x4c\xac\x07\xef\xf3\x98\x8e\x0e\xe4\xaf\xf4\x7d\x49\x6e\x6b\xe4\x51\x58\x0b\xa5\xb7\x12\x4d\x33\x6f\x1a\x56\xe6\xbf\x36\x28\x0f\xfe\x72\xb9\xad\x30\xf1\x5b\xdf\xf1\x6e\xe0\x76\xcb\xc4\xef\x7a\x49\xb7\xce\xd9\x3b\xe9\x19\x1b\x8b\x98\xb3\x32\x19\x21\x68\x98\x48\x4b\xd5\x4f\x41\xb9\x90\x5c\x40\x6e\xd3\x4d\xdc\x57\x49\x3b\xaa\xed\xe6\xc9\xb8\x4e\x8e\xbe\x3c\x62\xff\x17\x7e\x04\x27\x86\x9f\xa6\x6e\xbf\x37\x4e\x58\xe1\xbe\x63\x5e\xa5\x10\x86\x46\x7f\xd2\xd4\x90\x5a\x59\x70\xf2\x60\xf5\x76\xef\x3d\xd2\x0f\x6e\xdb\xa9\x3a\xb7\x23\xa1\xa9\x5d\x74\xb1\x39\x19\x9c\xf8\xe4\x06\xd0\x96\xf3\xfb\xf2\x7c\x32\x39\x55\xbf\x98\xa3\xf9\xe4\x54\x5d\xf8\x80\xd3\x47\x43\x8e\x61\xc7\x6f\x9b\x6c\xcb\x72\xf0\xf0\x67\x00\x00\x00\xff\xff\x7e\xa4\xd4\x6d\x20\x0e\x00\x00")

func templates_testSingletonCrdb_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_main_testGoTpl,
		"templates_test/singleton/crdb_main_test.go.tpl",
	)
}

func templates_testSingletonCrdb_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0x38, 0xff, 0x89, 0x6d, 0x1a, 0x55, 0x7a, 0x69, 0xc2, 0xf1, 0x71, 0x94, 0x18, 0x74, 0xe8, 0x9d, 0xea, 0xaa, 0x19, 0x24, 0x66, 0xea, 0x6a, 0xf0, 0x5a, 0xdf, 0xe7, 0xb7, 0x69, 0x8f, 0x2e}}
	return a, nil
}

var _templates_testSingletonCrdb_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\xca\x83\x30\x10\x84\xef\xff\x53\x0c\xe2\x41\x7f\x34\x0f\xf0\xc3\x7f\xea\xa9\x3d\xf4\x50\xec\x03\xa4\x75\x95\x40\xba\x15\xb3\x42\x21\xe6\xdd\x8b\x31\x58\x7b\xcb\x64\xe6\xdb\x9d\xed\x26\xbe\xa3\x21\x27\xd7\xc1\xd1\x28\x85\xe0\x57\xc8\x89\xe1\x5e\x35\x25\xfc\x0f\xe0\x7d\x8d\x51\x73\x4f\xc8\x0d\xb7\xf4\xaa\x90\x8b\xbe\x59\xc2\xdf\x3f\x54\xb3\xbc\x5c\x08\x29\x67\xba\x64\xaa\xa3\x3b\x3d\x0d\x47\x1b\xf5\xe6\x93\x75\x7b\xb9\x66\xcf\xfa\x11\x87\x25\x32\xca\x19\x83\x9d\x46\x6d\x31\x43\x8c\x58\x3a\xe8\x0d\x14\x75\x99\xb8\xc8\xbc\xff\xd0\x21\x64\x15\x96\xda\xdf\x9f\xeb\x49\x65\x5c\x46\xdc\xee\x7b\x24\x15\xde\x01\x00\x00\xff\xff\x91\x6e\x4f\x2d\xff\x00\x00\x00")

func templates_testSingletonCrdb_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_suites_testGoTpl,
		"templates_test/singleton/crdb_suites_test.go.tpl",
	)
}

func templates_testSingletonCrdb_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3c, 0xee, 0x2e, 0x96, 0xb6, 0x68, 0x8e, 0xe6, 0x13, 0x5b, 0x19, 0xc, 0x3f, 0x8d, 0xbd, 0x45, 0xf6, 0x91, 0xd7, 0x45, 0x15, 0xdd, 0x12, 0x15, 0x2a, 0x56, 0x1f, 0x17, 0xb9, 0xb8, 0xb3, 0x99}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\xdb\x30\x0c\x3d\x5b\xbf\x82\x0b\xb6\x41\x1e\x5c\x15\xbb\x76\xc8\xa1\x5f\x87\x62\x58\x10\x34\xce\x0f\x50\x6d\x3a\x15\xa2\x48\x86\x44\x2f\xc9\x0c\xfd\xf7\x41\x72\xda\xa6\x6d\x3a\x04\xc3\x86\x61\x87\xc4\x96\xf0\xf8\x1e\xf9\x48\xba\xef\x4f\xe0\xbd\xd4\x4a\x7a\x38\x1b\x83\x38\x8f\x6f\xe8\x45\x29\xef\x34\xc2\xf0\x10\x13\xb9\xc2\x10\x58\xd3\x99\x0a\x08\x3d\xf5\xfd\x10\x21\xe6\xed\x54\x77\x4e\xea\x10\xe6\xad\x47\x47\x9c\xe0\x53\x04\x28\xb3\x10\x65\x0e\x3d\xcb\x48\x4c\xa5\x93\x5a\xa3\xe6\x39\x63\x99\x6a\x40\xa3\xe1\x8f\x04\x57\x76\x6d\x66\xca\x2c\x3a\x2d\x5d\x08\x97\x56\x77\x2b\xe3\x73\x18\x8f\x7f\x05\x9b\x3a\xb5\x92\x6e\xfb\x15\xb7\x8f\x01\x3d\xcb\x32\x12\xb3\xa5\x6a\xf9\x28\xfe\xb7\xca\x2c\x80\x52\x0d\x6b\x45\xf7\x60\x8d\xde\x42\x3b\xc4\xc1\x12\xb7\x50\x0d\x91\xa3\x9c\x65\x81\xb1\xcc\x23\xd6\xb1\x7e\x27\x4d\x6d\x57\xea\x07\x8a\x09\xae\x67\x88\x35\xcf\x59\xf6\x5d\x3a\x40\x97\x7e\xd6\xb1\xec\xf4\x14\xce\x89\x70\xd5\x12\xd0\x3d\xc2\xcd\x64\x76\x7d\x5b\x82\x57\x35\x82\x6d\x40\x1a\x98\x4f\xe3\x0d\xcb\x6c\x64\xdc\xf3\xea\xa9\x82\x3e\x24\x2b\x22\xe9\xbe\xe6\x8c\x5c\x57\x11\x8f\xc9\x14\xf0\xd1\x16\xf0\x86\x01\x57\x17\xe5\xb6\x45\x5f\x00\xb9\x0e\xf3\x2f\x89\xe7\xdd\x18\x8c\xd2\x3b\x23\xae\x63\xa6\x0d\x1f\xcd\x4d\xb2\x80\xec\x93\xc8\xe1\x84\xc0\x27\xe9\x33\xf8\xe0\x47\x45\xe4\xdb\xf9\xd2\xf7\xaa\x01\x63\x09\xc4\xc4\x5e\x5a\x43\xb8\xa1\x10\x2a\xda\xc4\xca\xaa\xe1\x2c\x2e\x64\xb5\x5c\x38\xdb\x99\x9a\xe7\x7d\x8f\xa6\x0e\x81\x65\x03\xe4\x5b\xe7\xa9\xdc\xf0\xc4\xb2\xcf\xf0\xea\xe2\xce\x2a\x2d\x2e\x70\xa1\x4c\xe2\xd0\x1e\xf7\xef\xca\x0d\xaf\x68\x53\xc4\x02\x1f\x14\x8e\x02\xe5\x2c\xab\xb1\x41\x07\xb4\x11\xb7\x56\xeb\x3b\x59\x2d\x63\x43\x1f\xad\xb7\x62\x37\xb7\x6f\xd5\x19\x5b\x80\xa6\x86\x93\x10\x20\x9e\x1a\xa9\x3d\x26\x8d\x02\x92\xf4\x8d\x69\xd0\xf1\xfc\xf9\xe9\xb8\x96\x74\x49\xfa\x70\x3f\x5e\x35\xa2\xb2\x9d\xa1\x74\xf1\x62\xa8\x1e\x16\x90\xe7\xe2\x32\x62\x8e\x2c\xe5\xc9\x85\xd7\x59\xf2\x07\xd9\x08\x49\xc2\x11\xf4\xf9\x19\x64\xb4\x96\x86\xc0\x1a\x04\x87\x95\x75\x75\x01\x0b\x4b\x67\xa3\x62\xc0\xef\x92\x7e\xb1\x29\xf3\xe9\xd5\x79\x79\x7d\x68\x53\xfe\xc4\x2e\xec\x5a\x73\xec\x37\x43\x08\xf1\x57\x37\xe7\xf7\x67\x2c\x2e\xf5\x3f\x1e\xb1\xff\x64\xc2\xc2\xcf\x00\x00\x00\xff\xff\xee\x51\xfe\xc1\xbd\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0xb9, 0xeb, 0xd3, 0x89, 0x20, 0xf9, 0xe5, 0x15, 0xa0, 0x86, 0xbf, 0x52, 0x16, 0x6e, 0xb, 0x4e, 0xb2, 0x5, 0x41, 0x1f, 0x8f, 0xfb, 0xcb, 0x7f, 0xad, 0xf, 0xc4, 0xcc, 0xb0, 0x5d, 0x55}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl": templates17_upsertGoTpl,

	"templates/singleton/crdb_upsert.go.tpl": templatesSingletonCrdb_upsertGoTpl,

	"templates_test/singleton/crdb_main_test.go.tpl": templates_testSingletonCrdb_main_testGoTpl,

	"templates_test/singleton/crdb_suites_test.go.tpl": templates_testSingletonCrdb_suites_testGoTpl,

	"templates_test/upsert.go.tpl": templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"crdb_upsert.go.tpl": &bintree{templatesSingletonCrdb_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"crdb_main_test.go.tpl":   &bintree{templates_testSingletonCrdb_main_testGoTpl, map[string]*bintree{}},
			"crdb_suites_test.go.tpl": &bintree{templates_testSingletonCrdb_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
