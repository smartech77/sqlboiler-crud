// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.tpl
// override/templates_test/singleton/crdb_main_test.tpl
// override/templates_test/singleton/crdb_suites_test.tpl
// override/templates_test/singleton/crdb_upsert.tpl
// override/templates_test/upsert.tpl

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5b\x6f\xdb\xb8\x12\x7e\x96\x7e\xc5\x34\x38\x40\xa4\x03\x47\x39\xcf\x3d\xf0\x43\x93\xb4\x3d\xc5\xd9\xa6\xde\xa6\xdd\x02\x5b\x14\x01\x2d\x8d\x6c\xc2\x14\xa9\x52\x54\xb2\x5e\x55\xff\x7d\x31\x43\xc9\x92\x2f\x6d\xdc\xcd\x16\x7d\x4a\xcc\x21\xe7\xf2\xcd\x37\x17\xbb\x69\xce\xe0\x5f\x4e\xcc\x15\x5e\x8b\x02\x6f\xa4\x5e\xd4\x4a\x58\x78\x3a\x85\xe4\x1d\x9d\x26\x74\x0c\x5f\xa0\xea\x25\x5f\xc0\x49\xa7\xf0\x52\x54\x08\x67\x6d\x1b\xb2\x82\x3b\x61\x8f\x7e\x9e\x8a\x02\xd5\xf6\xf3\x2a\x5d\x62\x21\xf8\xc1\xfe\xd3\xe4\x66\x90\xf2\x03\x99\x43\xf2\x2c\xcb\x5e\x2a\x33\x17\x8a\x95\x9c\x9f\xc3\xfb\xb2\x42\xeb\x5e\x82\x70\x0e\x8b\xd2\x55\x20\x34\x48\x4d\x67\x13\x10\x3a\x83\xcc\x20\x9f\xd5\x65\x26\x1c\x82\xb1\x20\x17\xda\x58\x04\xa3\x21\x35\x3a\x57\x32\x75\x49\x98\xd7\x3a\x85\xc8\xc0\xbf\x9b\x66\x1f\x94\xb6\x8d\x7b\x33\x91\x57\xf3\x46\x5f\x76\x4f\x61\x6e\x8c\x9a\x6c\x34\x5d\x1a\x55\x17\xba\x82\x8f\x9f\x2a\x67\xa5\x5e\x4c\x3a\xbb\xfb\xe7\xf7\x4b\xe9\x50\xc9\xca\x41\x92\x24\xfe\x30\x06\xb4\xd6\x58\x68\xc2\xc0\xa2\xab\xad\x06\x93\x78\xbb\xd1\xdc\x48\x95\xbc\x44\x77\x75\x11\xc5\xbd\xce\xc1\x89\x3d\xfb\x3b\x66\x47\xd6\x92\x24\x89\xc3\x36\x0c\x9b\x06\x75\xc6\x18\x7a\x60\x09\xaa\x11\xb8\xf4\xef\x4c\x68\x99\xee\xc0\x3c\x7b\x1c\xce\xc0\x3a\x2b\x3a\xe3\x50\x8f\x07\x7e\xf6\x83\x91\x6f\xc2\x40\xe6\xe4\x14\xf1\xf0\xc7\xc0\xfe\x5f\x56\xff\x64\x0a\x5a\x2a\xb2\x17\x94\x04\x86\xb7\xf1\xc1\x8a\xf2\xb9\xb5\x11\x5a\x1b\xc7\x61\xd0\x1e\x4a\xd1\x57\x72\x72\x28\x25\x50\x53\xdd\xd1\x67\xfc\x03\xd3\xda\x19\xfb\x3d\xc5\x30\x52\x5d\xfe\xcd\x7c\xcd\x22\x32\x0c\x1c\xdb\xf3\x8d\x0b\x3f\x23\x85\xe4\xc7\xcf\x4c\xdd\x06\xcc\x7f\x3c\x4d\x47\xa6\xe2\x27\x64\x62\xd3\xc6\x64\x0e\x06\xa6\x03\x6c\x5d\x5b\x63\x79\x95\x5c\xe3\x7d\x74\xd2\x34\xc9\x6c\xb5\x20\xd7\xdb\xf6\x29\x68\x03\x4d\x33\x1a\x03\x6d\x0b\xa5\x35\x77\x32\xc3\x0c\x72\x63\xa1\xe6\x90\x4e\x18\xe7\x30\xa0\x19\x42\x98\x2a\x42\xe9\xc4\xc9\x02\x2b\x27\x8a\xf2\xd6\xdf\xba\x5d\xa2\x2a\xd1\x9e\x40\x02\xad\xbf\x2d\x73\xd0\xc6\x41\x72\x6d\xfe\x67\xcc\xaa\xe2\x04\x6d\x71\x26\x33\x17\x98\x1b\x8b\x1e\x39\xbe\xc4\xf0\xed\x13\x60\x88\x84\x5c\x61\x4f\x50\x67\x6c\x47\xff\x79\x85\xb9\xa8\x95\xab\x48\xe9\xe7\x1a\xad\xc4\x2a\xb9\x36\xfa\x77\xb4\xa6\x13\xdd\xa0\x8b\x9a\x66\x77\x7c\xb6\x6d\x07\xf0\x07\xe9\x96\xdd\xcd\x09\x98\x38\x0c\x83\xf3\x73\xb8\xa8\xa5\xca\x20\x15\xe9\x12\x61\x85\x6b\x90\xfa\x4c\x49\x8d\x50\x2f\x94\x54\x6b\x38\x83\x62\x5d\x7d\x56\x70\x57\x41\x49\x7f\x4b\x6b\xe6\x0a\x8b\x2a\x0c\xe6\x75\x4e\x9e\x54\xce\x16\x42\x2f\x14\x52\x47\xbb\xa8\xf3\x1c\x6d\x14\x73\xfc\x7b\x6c\xa0\x08\xe7\x75\x9e\x7c\xb0\xd2\xe1\xc5\xda\x61\x74\xea\x4e\x09\x74\x40\x55\xe1\x21\x71\xce\xe2\x70\xf7\x38\xa1\x63\x4a\xdc\xed\x04\x52\x72\xc2\x0a\xbd\xc0\x3d\x9e\x6d\x29\xbc\x61\x16\x45\xe9\xf7\x28\xdc\xa6\xe7\xa3\xd5\x0d\xac\x7e\xb4\xaa\x11\x1b\xbe\xa1\x8b\xf2\xf9\x74\x0a\x24\xed\x04\x71\x18\x0c\x09\x9b\xd5\x7d\xc2\xe6\x75\x1e\x33\x97\xf7\xb9\xe3\x49\x7b\x49\xfc\x78\x5d\xbb\xe4\xed\x2f\x26\x5d\x91\x1a\x66\xcc\xc4\x13\x27\x23\x2b\x0f\x3c\xfe\xb8\xc2\xf5\xa7\xe3\x4c\xbc\xd7\xca\x1b\x09\x83\x3b\x61\xb9\x46\xb8\xb6\x43\xa6\xd5\x93\xce\x24\xc5\xdd\xaf\x0a\x16\xdd\x36\x17\x5f\xb1\xc0\x67\x8e\xaa\x22\x0c\x82\x83\xa6\xfb\xc6\xfc\x80\x7c\x5c\x39\x47\x5c\x35\xb5\x1b\xdf\x1e\x92\xc5\x1f\x37\x34\xa0\x4f\x71\x18\x04\x5d\x43\xde\x0a\xe0\xfd\x88\x7a\x8f\x09\x60\x66\x65\x21\xec\xfa\xff\xb8\x1e\xdf\xdc\x9e\x4a\xec\x06\xa1\x99\x83\x42\xdd\xad\x44\x31\x75\xd8\xff\x30\xca\x0f\x37\xd8\x5a\xf3\xb2\xed\x4c\xd7\x4a\x77\xdb\x2d\xcd\x80\x5a\x65\xdc\x27\xe7\xdc\x70\xba\x98\x53\x76\x01\x08\x0d\x6a\xbf\xdc\x7f\x83\xbe\x8e\x09\x91\x9d\x9a\x1e\xbc\xec\x05\x63\x3f\x37\x0f\xa7\x50\x88\x15\x46\xc3\x40\xa1\x17\x47\xc1\x43\xc3\x96\x14\x95\xeb\x8d\x85\xc9\x41\x6a\xef\xbf\x64\xf7\x03\x5f\x18\x09\x35\xe8\x35\x4c\x7d\xb4\x9e\xe0\xbf\xd2\xd1\xa5\x49\x57\xd6\x88\x74\x79\x75\x11\x65\x52\x28\x24\xfd\x27\x4d\x33\xfe\xd2\xd2\xb6\x27\x87\x76\x0b\x8b\xae\x3f\x1e\x66\xea\xa4\x1b\xfa\x9c\x40\x6f\xfa\x4e\xa8\x1a\x5f\x8b\xb2\xe4\xc8\xa9\x7a\x86\x79\x71\x21\x75\xd6\x89\x0e\xe2\xf1\x6e\x5d\xe2\xe1\x78\x37\x0a\x7b\x7b\x41\x3f\xe3\x46\xf3\x6b\x6b\x80\x31\x1a\x5d\xb6\x2c\xba\x98\x2e\xf6\x89\x62\x47\x2d\xba\x1f\xe7\x26\x59\x24\x53\x07\x9c\xdc\xf6\x92\xdd\x6c\xfd\xe8\x67\xe8\xb8\xcb\x62\x4e\xa9\x49\x5e\xe9\x4c\x5a\x4c\x5d\xd4\x1f\xfc\x46\x37\xde\xe4\x91\x21\xa2\xdc\x09\xb5\x35\x8d\x59\x58\xbd\xb0\xa6\xe8\x9d\x67\x85\x5d\x97\xdc\x4a\x4c\xec\x7b\x9b\xf7\x84\x56\x1f\xa9\x1d\xda\x5c\xa4\xd8\xf8\xed\x81\x39\xbe\x03\xd3\x08\xc2\xfe\xe1\x60\x7c\xe6\xec\xd7\x4d\x8f\x74\xf8\x48\x65\xee\x97\xb7\x2b\x9c\xd7\x8b\xd7\x26\xf3\xe3\x37\x2f\x5c\xf2\xa2\xb4\x52\x3b\xa5\xa3\x41\xce\xa3\xc5\xf6\xba\x98\xda\xf1\xc3\xb7\x09\x9d\xc1\xda\x03\xf1\xf8\xfc\xd3\x56\x94\x70\x9d\xbc\x35\xf7\xd1\xc8\x9c\xd7\x46\x4b\x73\x72\x93\x0a\xe6\x13\x85\xcf\xdf\x3b\x37\x39\x9e\x4e\xa1\xfa\xac\x92\xe7\xd6\x5e\x9b\xb7\xe6\xde\x8f\xc6\x4e\x33\x25\xff\xfc\x1c\x36\xe5\xc7\xdb\xb0\x3e\x75\x5d\x06\x40\xe8\xb5\x5b\xd2\xda\x7c\xbf\x44\x0d\x6e\x89\x16\x4f\x2b\x5a\x1c\x7d\xc1\x75\x14\x19\x16\x95\xdb\x9e\xb2\xec\x32\xad\xc0\x87\xdd\xe5\x39\xbc\xcf\xc1\xed\x8e\x4a\xcb\x3e\x6d\xfa\xdc\x09\xbe\xa7\xaf\x9e\x0c\xf8\x8e\xc7\xe2\x11\x43\xb6\x1f\xe3\x0f\xdd\xe5\xb1\x0d\x53\x9f\xfa\xe3\x54\x6f\xc6\x77\xf0\x8d\xfd\x78\xf3\x53\x44\x66\x9e\xe5\x0e\xed\xde\x6e\xdc\x6d\xbf\xaa\xfb\x61\xa7\x7f\xa0\xa5\x1a\xef\xc5\xed\x5f\x01\x00\x00\xff\xff\xce\x0d\xb9\x69\x71\x12\x00\x00")

func templates17_upsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertTpl,
		"templates/17_upsert.tpl",
	)
}

func templates17_upsertTpl() (*asset, error) {
	bytes, err := templates17_upsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.tpl", size: 4721, mode: os.FileMode(420), modTime: time.Unix(1527517464, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xaf, 0xfc, 0x2f, 0xad, 0xab, 0x49, 0xfe, 0xdd, 0x55, 0x4d, 0x5f, 0x6d, 0x8, 0x8, 0x1c, 0x83, 0x9e, 0x63, 0x8d, 0x9d, 0x96, 0x23, 0xa6, 0xcf, 0x4d, 0x4a, 0x4f, 0x88, 0x2a, 0xd4, 0x7}}
	return a, nil
}

var _templates_testSingletonCrdb_main_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x5d\x6f\xdb\x36\x17\xbe\xf7\xaf\x38\xaf\x80\xb6\x52\xaa\xd2\xef\x75\x06\x23\xb0\x65\xa7\x08\x8a\x26\x9d\x6d\xa0\x1b\xd0\x8b\xd2\xd2\x91\x4d\x44\x22\x95\x43\x2a\xae\x57\xe4\xbf\x0f\xa4\xa8\x48\x76\xe5\x35\xc0\x36\xec\x4e\x3a\x7c\x78\x3e\x9e\xf3\xc1\xf3\xc8\x09\x68\xfb\x2d\x99\xcf\xae\xef\xf1\x00\x13\x20\xdc\xe2\xb7\x8a\x7d\xac\xb5\x49\x54\x59\x89\x02\xc3\xaf\xe1\x55\x19\x85\xe1\x17\x19\x5d\x7d\xd1\x6f\x93\xbb\xdb\xd5\x7a\x39\xbd\xb9\x5d\xb3\x8b\xab\xeb\xbb\xe5\xe2\xe6\xfd\x2d\x7c\x58\xfc\xce\x2e\xae\xbe\xc8\xe8\xed\xd7\x68\x34\x32\x87\x0a\x21\xa5\x6c\xb3\x46\x6d\x90\x40\x1b\xaa\x53\x03\xdf\x47\x00\xd9\x26\x51\x52\xc2\x85\x7e\x28\xd8\x7c\x36\x72\x92\x5b\x5e\x22\x58\x90\x90\xdb\x11\xc0\x4e\x69\x03\xd0\x13\xd4\x1a\xe9\x48\x50\x71\xad\x8f\x04\x5a\x17\xa5\xca\xb0\x87\x50\xe4\x74\x08\x69\xac\x0d\x83\xda\xcc\x67\xce\x8e\x87\x3c\x8d\x46\x79\x2d\x53\x10\x52\x98\x30\xf2\xae\x7d\xe4\x42\xc2\x04\x5e\x77\xae\x7f\x7f\xb2\xc8\xf1\x18\x34\x9a\xba\x82\xac\x2e\x2b\x0d\x66\x87\x90\x71\xc3\x37\x5c\x23\xe8\x74\x87\x25\x07\x2e\x33\x10\xa5\x35\xab\x41\x18\x6b\x57\x01\x07\x83\x56\xc4\xe9\x00\xc4\x65\xa6\xca\xe2\x60\x75\x6d\x51\x22\x71\x83\x99\xf3\xab\xa7\x4a\x81\xd9\x71\xe3\xa4\x1a\x52\x2e\x61\x83\x40\xb5\x04\xbe\xe5\x42\x6a\x63\x15\xd7\x5a\xc8\xad\xf5\xe0\x58\x91\x7e\x28\x36\x4a\x14\x48\x70\xb7\xfc\x08\x15\x4f\xef\xf9\x16\x59\x13\x62\x98\xc2\x45\x17\x51\xd4\x84\x12\x46\x80\x44\x8a\x5c\xe4\xb6\x08\x90\xa8\x91\x58\xbe\x52\xe6\xb3\x32\x81\x47\x51\x21\xb1\xf7\x68\x56\x8e\xb8\x30\xb0\xaa\x58\xb6\x91\xbc\xc4\x20\x72\x58\x97\xb0\x73\x48\x7b\xe8\x71\x2e\x8f\xe7\x70\xf6\xd0\xe3\x5c\x7a\xcf\xe1\xec\x61\x8b\xb3\x49\xee\xe1\x6e\xa4\x69\x41\x8a\x5a\xa3\x6d\x69\x9c\xd3\xe7\xcf\x1d\x7a\x3c\x86\x84\x90\x1b\x04\xee\x13\x26\xfe\xc0\x0c\xb2\x0d\xd8\x68\x99\xd3\xd7\x2b\xa5\x49\x07\x62\x2b\xc3\x37\x05\x36\x07\x61\x4b\x5f\x64\xb9\x14\xb9\xe3\x76\x62\x49\x25\x55\xad\xdd\xfd\x30\xfa\xc5\x49\xff\x37\x01\x29\x0a\x97\x04\x00\x42\x53\x93\xb4\xf2\x11\xc0\xd3\xf1\xd5\xd4\xf9\xf5\xf2\xcb\xb6\x9e\xeb\xb2\x4a\xca\x0c\x2e\x27\x80\xdf\x30\x65\x89\x2a\x4b\x2e\xb3\x30\x48\x55\x7a\x4f\x8a\xa7\xbb\x20\x86\xc0\xa2\x82\xf8\x39\xe3\x31\x04\xef\xde\x09\xa9\x31\xad\x09\x03\xf7\x67\x11\xef\x2c\x47\x93\xa6\xd6\x1b\x62\x9d\x3f\x3f\x57\xaf\x1f\x0a\xaf\xc5\x57\xb9\xb3\xd5\x91\x78\x6c\xcf\x11\x46\x31\xec\xad\x56\xa1\xd8\x27\x51\x61\x18\x75\xb1\xb0\x95\xc9\x54\x6d\x93\xbe\xef\xfb\x60\xc5\xae\x73\x25\xee\xaf\x3f\xe0\x61\x8e\xda\x90\x3a\x20\x85\xdd\x68\x8b\x81\x8e\xd3\xd1\xa9\xe4\x64\x06\x29\xed\x93\xaa\x48\xb3\xcf\xc4\xab\x10\x89\x62\x08\x72\x2e\x0a\xdb\xbf\x0a\xb4\xbd\x0e\x6f\x9e\x83\x76\x7a\xdf\x40\xda\xb0\xe1\xb8\x3a\x4e\x65\xcf\xe9\x7f\xd6\xb0\x7e\x28\x4e\xed\x0e\xc5\xfb\x99\x8b\x73\x56\xf3\xd2\xb0\x4f\x24\xa4\x29\xa4\x35\x17\xbd\xdc\x99\x3d\x17\x06\x72\x45\x3f\xf7\x67\xcf\x92\x42\x69\x0c\x23\xdb\x6d\xd3\xdc\x3e\x0f\x6d\xa1\x0a\x0d\x99\x92\x18\x43\x6a\x11\x6e\xcc\xee\x49\x18\x04\x94\x19\xa8\xdc\x09\x2a\x51\xe1\x68\x98\xcf\xff\x38\x30\xaf\x4c\x8a\xe2\xf9\x71\x39\x9d\xbc\x54\xcb\xa4\xcc\x42\x6d\xab\x35\x6e\x35\xf8\x17\x29\x06\x4e\x5b\x0d\x8c\xb1\xe6\xbf\x3f\x9f\xd3\x81\x36\xf3\xb7\x9b\x6b\x8c\xb1\xa8\xc1\xb1\x85\x7c\x84\x09\x28\x6d\x3f\x04\x29\x19\xb6\x55\x5f\xa0\x6c\x2c\x47\x96\x9d\xff\x7b\x6e\xd2\x5e\xf7\x34\x86\x35\xbb\xc5\xfd\x12\x79\x86\xe4\xf1\x6d\x84\xba\x69\xbe\xcb\x09\xbc\xde\x1c\x0c\x6a\x36\xab\xf3\xdc\xbd\x91\xee\xcc\xf2\x3e\x78\x96\xf6\x1b\xb7\x51\xd2\x49\x9b\x2c\x36\xd7\xbb\xbc\x5e\x4e\xdc\xf9\xb2\x96\x83\x19\xed\xe7\xb3\x4d\x16\xd5\x52\x0a\xb9\xbd\x0c\x9e\x99\x6d\xb8\x89\x7e\xb8\xd1\xb8\xc0\xfc\x33\x10\x0d\x02\x90\xe8\x04\xf0\xe3\x80\x7d\x41\xc6\x8f\xc7\x76\x2f\xa5\xda\x94\x8e\x49\x6b\x76\x55\x59\xbb\x79\x18\x24\xcb\xc5\x74\xbd\x80\xf9\x74\x3d\x9d\x4d\x57\x0b\x78\xa5\x4f\xa6\x65\xd4\x59\x4d\x99\xaf\xa6\xc0\xce\xd7\xe1\x99\x7b\x3c\xc7\x6d\xf9\xd4\xc6\xfe\x58\xe3\xd1\x59\x9f\xfb\xaf\xd4\xcf\x3c\x9e\x2f\xef\x3e\x75\xfe\xde\x5c\xc3\xe2\xb7\x9b\xd5\x7a\x05\xaf\x34\x24\xd3\x55\x32\x9d\x2f\xfe\xe5\x08\xc6\x63\x30\xc8\x29\x53\x7b\x09\xfe\x58\x43\x5a\x20\x97\x75\x05\x86\xeb\x7b\x0d\xfb\x1d\x4a\x37\x3b\x9a\xbd\x2a\x17\x52\xe8\x5d\x5b\x2e\xc3\x14\xb4\x2a\xff\x62\x4b\x3a\x7e\xd8\xdd\x56\xdb\x4e\xb6\x97\x3c\xed\xed\x1d\x70\xa8\xbf\xb5\x27\xbc\xb0\x12\x95\xb4\xe1\x84\x7e\xf3\x8e\x9b\x30\x9a\xcd\x57\xe4\x9d\x3f\x43\x96\xda\xc3\xd8\x59\xf0\x36\x4f\xe9\xe8\x40\xbe\xa5\x1f\x0a\x76\x57\xa1\x0c\x83\x4a\x69\xb3\x25\xb4\xc5\x9c\x91\x78\x44\x62\x49\x9b\xec\xf9\x6c\x56\x8b\x22\xfb\xb5\x46\x3a\xf8\x76\x6b\xf6\xc4\xd8\xef\x81\xa7\xdb\x42\xb3\x6d\xc6\x7e\xfb\x8b\xbb\x05\xcf\x75\xa9\xe7\x70\x28\x06\x29\x8a\x78\x80\xb2\xe3\xd0\x9e\xfe\x0c\x00\x00\xff\xff\xc7\x6b\xfb\xb5\x0f\x0d\x00\x00")

func templates_testSingletonCrdb_main_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_main_testTpl,
		"templates_test/singleton/crdb_main_test.tpl",
	)
}

func templates_testSingletonCrdb_main_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_main_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_main_test.tpl", size: 3343, mode: os.FileMode(420), modTime: time.Unix(1527517834, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x32, 0xd8, 0x6c, 0xb0, 0x10, 0x13, 0x28, 0x3c, 0xc6, 0x5c, 0x68, 0x65, 0x30, 0x9a, 0x2c, 0xdd, 0xb1, 0x47, 0x85, 0xa5, 0x60, 0x32, 0x12, 0xc, 0xc9, 0xef, 0x83, 0xfd, 0x88, 0xdf, 0x60, 0x4d}}
	return a, nil
}

var _templates_testSingletonCrdb_suites_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\xca\x83\x30\x10\x84\xef\xff\x53\x0c\xe2\x41\x7f\x34\x0f\xf0\xc3\x7f\xea\xa9\x3d\xf4\x50\xec\x03\xa4\x75\x95\x40\xba\x15\xb3\x42\x21\xe6\xdd\x8b\x31\x58\x7b\xcb\x64\xe6\xdb\x9d\xed\x26\xbe\xa3\x21\x27\xd7\xc1\xd1\x28\x85\xe0\x57\xc8\x89\xe1\x5e\x35\x25\xfc\x0f\xe0\x7d\x8d\x51\x73\x4f\xc8\x0d\xb7\xf4\xaa\x90\x8b\xbe\x59\xc2\xdf\x3f\x54\xb3\xbc\x5c\x08\x29\x67\xba\x64\xaa\xa3\x3b\x3d\x0d\x47\x1b\xf5\xe6\x93\x75\x7b\xb9\x66\xcf\xfa\x11\x87\x25\x32\xca\x19\x83\x9d\x46\x6d\x31\x43\x8c\x58\x3a\xe8\x0d\x14\x75\x99\xb8\xc8\xbc\xff\xd0\x21\x64\x15\x96\xda\xdf\x9f\xeb\x49\x65\x5c\x46\xdc\xee\x7b\x24\x15\xde\x01\x00\x00\xff\xff\x91\x6e\x4f\x2d\xff\x00\x00\x00")

func templates_testSingletonCrdb_suites_testTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_suites_testTpl,
		"templates_test/singleton/crdb_suites_test.tpl",
	)
}

func templates_testSingletonCrdb_suites_testTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_suites_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_suites_test.tpl", size: 255, mode: os.FileMode(420), modTime: time.Unix(1527517318, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3c, 0xee, 0x2e, 0x96, 0xb6, 0x68, 0x8e, 0xe6, 0x13, 0x5b, 0x19, 0xc, 0x3f, 0x8d, 0xbd, 0x45, 0xf6, 0x91, 0xd7, 0x45, 0x15, 0xdd, 0x12, 0x15, 0x2a, 0x56, 0x1f, 0x17, 0xb9, 0xb8, 0xb3, 0x99}}
	return a, nil
}

var _templates_testSingletonCrdb_upsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6f\xe2\x38\x14\x7d\xb6\x7f\xc5\x6d\xa4\xaa\x89\x64\x85\xed\xeb\x4a\x3c\xb4\x24\xed\xb2\x42\xa1\x40\xd8\x1d\x69\x34\x0f\x26\xb9\x01\x6b\x82\xc3\xf8\x83\xb6\x9a\xf2\xdf\x47\xce\x07\xa1\xa5\xd3\x51\x25\x64\x90\xef\x3d\xc7\xc7\xc7\xe7\x32\x18\xc0\xca\x8a\x32\x5f\xee\x34\x2a\x33\xb3\xa8\x9e\x47\x55\xf6\x5d\x55\x3c\xdb\x44\xb7\x4d\x4d\x03\x87\xc5\x6c\x02\xda\x70\x83\x5b\x94\x06\xb4\x51\x42\xae\xc1\x6a\xb7\x9a\x0d\x82\xad\xe1\x11\x37\x1c\x76\xaa\xda\x8b\x1c\xf3\x90\x16\x56\x66\x1f\xb1\xfb\xb9\xe0\x90\x2b\xb1\x47\xa5\xc3\x48\xf0\x12\x33\xc3\xc0\xf0\x55\x89\x09\xdf\x62\x7b\x0a\x03\xbb\xcb\xb9\xc1\xa9\x1c\x55\xb2\x28\x45\x66\x60\x55\x55\x25\x03\x85\xa6\xab\x31\xc8\xda\x1a\x83\xc7\x8d\x30\x58\x0a\x6d\xe0\xeb\xb7\x86\x21\xe8\xf4\xfe\xa4\xa4\xeb\x83\xa1\xdb\xdc\x72\xb9\x2e\x31\x1c\xe7\x28\xcd\xcc\x56\x06\x17\xa5\xc8\xd0\xe9\x0a\x27\x33\x06\xee\x7b\x3e\xeb\xc9\x03\x4a\x7a\xf6\xcf\x10\x1c\x51\x01\x25\x0a\x3f\x87\x55\x68\x02\x4a\xc9\xca\x16\xf0\xf7\x29\xee\x1e\xcd\xad\x2d\x0a\x54\x7e\x40\x49\x8e\x05\xaa\x93\xe2\x83\xed\x8a\x2b\x5b\x38\x78\x56\x95\x76\x2b\xb5\xa3\xf0\xa2\xf8\xee\x66\x39\x49\xe1\xbf\x9b\xc9\x32\x5e\x78\x94\x88\x02\x4a\x94\x7e\xaf\x12\x2e\x86\xf0\x97\xb3\xeb\x88\x1b\x42\xb1\x35\xe1\x62\xa7\x84\x34\x85\xef\xf9\x97\x3a\x68\xf1\xe0\x7e\x7b\x8c\x12\x42\x1a\x9b\x75\xf8\x6f\x25\x4e\xd8\x18\x78\x0c\xbc\xa0\xeb\xe8\x14\x96\x3c\xc3\x4d\x55\xe6\xa8\x74\x7d\xe7\xa5\xc6\xb1\xcc\xf1\xe9\xb4\xc0\xde\xe8\x62\x70\xcd\xe0\x3a\x08\x28\x39\x50\x4a\x9c\xa2\xbb\x56\x11\x25\xce\x21\x77\x86\x37\x4e\x16\xf1\x3c\x85\x71\x92\x4e\xe1\x52\xbb\xcf\x34\x81\xd1\x34\xb9\x9b\x8c\x47\x29\xd4\x4a\x8f\x19\x63\xfd\x15\x19\x25\xce\xa8\xc1\x00\xb2\x2e\xa2\x80\x4f\x3b\xcc\x8c\xae\x23\x7e\x4c\x0e\xee\x51\x82\xd9\x54\x76\x6d\xe0\x11\x81\x2b\x04\x59\x99\x26\x89\x42\xae\xeb\xa7\x0a\xff\x57\xc2\xe0\xed\xb3\x41\xff\xca\xbf\x0a\x4e\xf6\x16\xb5\x47\xfe\x2b\xab\xfa\xf0\xd6\x4e\xbd\xd3\xee\x05\xe0\x39\x75\xa2\x80\x8b\xb3\x71\x78\x79\xa9\x6d\x6a\xf6\x03\x18\x76\x6f\x77\x46\x12\x4d\x21\x99\xa6\xff\x8c\x93\x7b\xcf\x59\x08\x58\x6a\xfc\x6d\xe7\xf2\x21\xba\x49\x63\x58\xc4\x69\x73\x34\x29\x2a\x05\x82\xc1\xde\x65\x48\x71\xb9\xc6\x76\xf8\x6a\x06\xa7\x4c\xf4\xb1\x21\x6f\x4d\x60\xce\x04\x42\x0e\x6e\xf9\xe1\xc2\x9e\xbf\x4e\x73\x3f\x05\x67\x03\xb0\xaf\x91\x6f\x25\x36\x24\xef\x96\x3c\x18\x42\xfc\x65\x34\x59\x46\x71\x14\x7a\x7f\x40\x1f\x9a\x2c\xb5\x23\xe0\x86\xad\xbf\xc5\x39\xf1\x3c\x4e\x97\xf3\x64\x9c\xdc\x43\xcd\xfb\xe1\xab\xd6\xff\x4f\xdd\x83\xba\x33\x14\x1a\xab\x24\x38\x50\xdb\x1f\xd0\xc3\xaf\x00\x00\x00\xff\xff\xe9\x90\x0e\x90\x81\x05\x00\x00")

func templates_testSingletonCrdb_upsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_upsertTpl,
		"templates_test/singleton/crdb_upsert.tpl",
	)
}

func templates_testSingletonCrdb_upsertTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_upsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_upsert.tpl", size: 1409, mode: os.FileMode(420), modTime: time.Unix(1527519685, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0x40, 0x98, 0x24, 0x4a, 0x65, 0xcb, 0x7f, 0x9d, 0x3f, 0x7e, 0x80, 0xca, 0x9e, 0x44, 0xc2, 0x9, 0xd9, 0x24, 0xa2, 0xef, 0xbc, 0x5f, 0x9c, 0x3b, 0x39, 0xc, 0x8d, 0x61, 0x17, 0x6f, 0x5f}}
	return a, nil
}

var _templates_testUpsertTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\xcf\x6e\xda\x40\x10\xc6\xcf\xde\xa7\x98\x5a\x6d\x65\x57\xce\x46\xbd\xa6\xe2\x90\x10\x0e\x55\x55\x84\x82\x79\x80\xc5\x1e\x93\x15\xeb\x5d\x6b\x77\x1c\xa0\x8e\xdf\xbd\x5a\x03\x09\x7f\x8c\xc4\x25\x55\x0f\xec\x61\x76\xbe\xd9\xdf\x7c\x7c\x6e\x9a\x1b\xf8\x4c\x62\xae\x70\x2c\x4a\x9c\x4a\xbd\xa8\x95\xb0\x70\x37\x00\x9e\xfa\x2a\xf7\x65\x78\x05\xb7\xbf\x79\x05\x92\xa4\x70\x28\x1c\xc2\x4d\xdb\xb2\xe3\x01\x13\x55\x5b\xa1\xce\xe5\xd5\xb6\xde\x2b\x7e\x11\xf6\x2a\x69\x26\x4a\x54\xbd\xd2\xab\xb0\x8f\xe5\x45\xad\x33\x20\x74\xd4\x34\xa7\xf4\x6d\x3b\xab\x1c\x5a\x8a\x08\xbe\xf9\x0e\xa9\x17\x3c\x8d\xa1\x61\x01\xf1\x89\xb0\x42\x29\x54\x51\xcc\x58\x20\x0b\x50\xa8\xa3\xa6\x39\xe5\x68\xdb\xa1\x51\x75\xa9\x5d\x0c\x83\xc1\xc5\x9e\x89\x95\xa5\xb0\x9b\x5f\xb8\x79\xeb\x6e\x58\x10\x10\x9f\x2e\x65\x15\x85\xfe\xac\xa4\x5e\x40\x87\x07\x2b\x49\xcf\x60\xb4\xda\x40\xb5\xd5\xc1\x12\x37\x90\x6d\x95\x61\xcc\x82\x96\xb1\xc0\x21\xe6\xde\x04\x2b\x74\x6e\x4a\xf9\x07\xf9\x18\x57\x53\xc4\x3c\x8a\x59\xf0\x22\x2c\xa0\xed\x7e\xc6\xb2\xe0\xf6\x16\xee\x89\xb0\xac\x08\xe8\x19\xe1\xe7\x78\x3a\x7a\x4a\xc1\xc9\x1c\xc1\x14\x20\x34\xcc\x26\xbe\xc2\x82\x3e\x76\xff\xc8\xa1\x73\xef\x37\x4d\xdb\x19\xe3\x1f\x3a\xe4\x98\x92\xad\x33\x8a\x3c\x60\x02\x5f\xfb\x46\x26\xd0\x57\x7d\x7c\x48\x37\x15\xba\x04\xc8\xd6\x18\xff\xe8\xe6\x7e\x1a\x80\x96\x6a\x67\xd6\xc8\x6f\x53\x44\xe1\x4c\x77\x36\x91\x79\x7f\xf4\x02\x21\xb8\x8e\xe5\x0e\xbe\xb8\x30\xf1\x03\x77\xe6\xd1\xda\x6f\xf5\xbb\x76\x94\xae\xa3\xb9\x91\x8a\x3f\xe0\x42\xea\x28\x8e\x59\x90\x63\x81\x16\x68\xcd\x9f\x8c\x52\x73\x91\x2d\xbd\xa1\x6f\x6b\xf6\x81\xf3\x7d\x88\xd6\x09\x14\x42\x39\x4c\x3c\x74\x77\x5c\xb7\x46\xdd\xe9\x2f\xec\x70\x06\x9f\x99\x5a\x53\x57\x38\xfd\x6b\xf6\xa1\x8e\x68\x1d\xf3\xa1\x6f\x3b\x60\x3f\x67\x88\xf6\x33\x7d\x4b\x37\xd5\x37\x7d\x3f\x6a\x09\x57\x42\x13\x18\x8d\x60\x31\x33\x36\x4f\x60\x61\xe8\x2e\x4c\xb6\xfd\x3b\xa2\x93\x7c\xcd\x26\x8f\xf7\xe9\xa8\x2f\x5f\x1f\x91\x96\x9d\xe3\x57\x7d\x76\x9c\xf3\x8f\x0d\xd6\xd5\x39\xf1\x19\xff\x67\x31\xf9\x1f\x52\xd2\xfe\x0d\x00\x00\xff\xff\xda\x5f\x68\x2c\x7f\x06\x00\x00")

func templates_testUpsertTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertTpl,
		"templates_test/upsert.tpl",
	)
}

func templates_testUpsertTpl() (*asset, error) {
	bytes, err := templates_testUpsertTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.tpl", size: 1663, mode: os.FileMode(420), modTime: time.Unix(1527506431, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0x35, 0x7f, 0xb2, 0xb2, 0x6e, 0x77, 0x3c, 0xe3, 0x3d, 0x5e, 0xd7, 0x52, 0x7f, 0x62, 0x98, 0xb7, 0x64, 0x21, 0x8d, 0x6e, 0x70, 0x9b, 0x35, 0x66, 0xfb, 0x5d, 0x94, 0xbc, 0x0, 0x22, 0xfd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.tpl": templates17_upsertTpl,

	"templates_test/singleton/crdb_main_test.tpl": templates_testSingletonCrdb_main_testTpl,

	"templates_test/singleton/crdb_suites_test.tpl": templates_testSingletonCrdb_suites_testTpl,

	"templates_test/singleton/crdb_upsert.tpl": templates_testSingletonCrdb_upsertTpl,

	"templates_test/upsert.tpl": templates_testUpsertTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.tpl": &bintree{templates17_upsertTpl, map[string]*bintree{}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"crdb_main_test.tpl":   &bintree{templates_testSingletonCrdb_main_testTpl, map[string]*bintree{}},
			"crdb_suites_test.tpl": &bintree{templates_testSingletonCrdb_suites_testTpl, map[string]*bintree{}},
			"crdb_upsert.tpl":      &bintree{templates_testSingletonCrdb_upsertTpl, map[string]*bintree{}},
		}},
		"upsert.tpl": &bintree{templates_testUpsertTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
